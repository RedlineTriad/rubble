(function() {var implementors = {};
implementors["rubble"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl Send for HandleRange","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for AttributeServer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for AttributeServerTx&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Attribute&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NoAttributes","synthetic":true,"types":[]},{"text":"impl Send for AttUuid","synthetic":true,"types":[]},{"text":"impl Send for Beacon","synthetic":true,"types":[]},{"text":"impl&lt;C, F&gt; Send for BeaconScanner&lt;C, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for BytesOr&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for P256Provider","synthetic":true,"types":[]},{"text":"impl Send for P256SecretKey","synthetic":true,"types":[]},{"text":"impl Send for RingProvider","synthetic":true,"types":[]},{"text":"impl Send for RingSecretKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for SharedSecret","synthetic":true,"types":[]},{"text":"impl Send for InvalidPublicKey","synthetic":true,"types":[]},{"text":"impl Send for BatteryServiceAttrs","synthetic":true,"types":[]},{"text":"impl Send for MidiServiceAttrs","synthetic":true,"types":[]},{"text":"impl Send for Properties","synthetic":true,"types":[]},{"text":"impl Send for BatteryLevel","synthetic":true,"types":[]},{"text":"impl Send for Appearance","synthetic":true,"types":[]},{"text":"impl Send for Channel","synthetic":true,"types":[]},{"text":"impl&lt;'a, P:&nbsp;?Sized&gt; Send for ChannelData&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, S&gt; Send for BleChannelMap&lt;A, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for L2CAPState&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Sender&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, M, P&gt; Send for L2CAPStateTx&lt;'a, M, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CompanyId","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Connection&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as Config&gt;::PacketQueue as PacketQueue&gt;::Consumer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as Config&gt;::PacketQueue as PacketQueue&gt;::Producer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DeviceAddress","synthetic":true,"types":[]},{"text":"impl Send for FeatureSet","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Responder&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Config&gt;::ChannelMapper: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as Config&gt;::PacketQueue as PacketQueue&gt;::Consumer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Config&gt;::PacketQueue: PacketQueue,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as Config&gt;::PacketQueue as PacketQueue&gt;::Producer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for LinkLayer&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as Config&gt;::PacketQueue as PacketQueue&gt;::Consumer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Config&gt;::PacketQueue: PacketQueue,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as Config&gt;::PacketQueue as PacketQueue&gt;::Producer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Config&gt;::Timer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Cmd","synthetic":true,"types":[]},{"text":"impl Send for AddressKind","synthetic":true,"types":[]},{"text":"impl Send for NextUpdate","synthetic":true,"types":[]},{"text":"impl Send for RadioCmd","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ServiceUuids&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AdStructure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ConnectRequestData","synthetic":true,"types":[]},{"text":"impl Send for PduBuf","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Pdu&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SleepClockAccuracy","synthetic":true,"types":[]},{"text":"impl Send for PduType","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for Llid","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for Pdu&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AllowAll","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhitelistFilter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; Send for AdvFilter&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ScanFilter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectionParamRequest","synthetic":true,"types":[]},{"text":"impl Send for ConnectionUpdateData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ControlPdu&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ControlOpcode","synthetic":true,"types":[]},{"text":"impl Send for VersionNumber","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Consume&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SimpleQueue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SimpleProducer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SimpleConsumer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AdvertisingChannel","synthetic":true,"types":[]},{"text":"impl Send for DataChannel","synthetic":true,"types":[]},{"text":"impl Send for NoSecurity","synthetic":true,"types":[]},{"text":"impl Send for SecureConnections","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SecurityManager&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AuthReq","synthetic":true,"types":[]},{"text":"impl Send for KeyDistribution","synthetic":true,"types":[]},{"text":"impl Send for IoCapabilities","synthetic":true,"types":[]},{"text":"impl Send for BondingType","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Instant","synthetic":true,"types":[]},{"text":"impl Send for Uuid16","synthetic":true,"types":[]},{"text":"impl Send for Uuid32","synthetic":true,"types":[]},{"text":"impl Send for Uuid128","synthetic":true,"types":[]},{"text":"impl Send for UuidKind","synthetic":true,"types":[]}];
implementors["rubble_nrf5x"] = [{"text":"impl Send for BleRadio","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BleTimer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StampSource&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()