var searchIndex = JSON.parse('{\
"rubble":{"doc":"An experimental BLE stack.","t":[17,13,4,13,13,13,0,0,11,11,0,0,0,11,11,11,11,0,11,0,0,0,0,0,11,11,11,11,0,4,3,4,8,3,3,3,3,18,3,13,13,13,13,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,3,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,16,16,16,12,12,8,3,3,3,3,3,3,8,16,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,4,18,13,3,13,13,13,8,13,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,13,18,18,13,13,3,13,13,18,13,13,13,13,13,18,13,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,16,3,3,3,8,3,3,18,18,18,8,8,18,3,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,18,17,3,3,3,3,13,18,18,3,13,18,18,18,18,3,13,13,17,17,17,17,17,4,13,13,4,13,3,18,8,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,4,18,13,3,13,18,18,13,18,18,13,3,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,17,13,13,13,13,17,13,13,3,13,13,3,17,13,4,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,3,4,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,3,3,3,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,13,13,3,13,13,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,3,8,16,8,8,16,3,3,3,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,5,11,10,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,3,13,4,13,13,18,18,4,3,13,13,18,18,13,13,3,13,4,13,18,3,8,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,18,18,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,18,3,13,3,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BLUETOOTH_VERSION","Eof","Error","IncompleteParse","InvalidLength","InvalidValue","att","beacon","borrow","borrow_mut","bytes","config","ecdh","eq","fmt","fmt","from","gatt","into","l2cap","link","phy","security","time","to_string","try_from","try_into","type_id","uuid","AttUuid","Attribute","AttributeAccessPermissions","AttributeProvider","AttributeServer","AttributeServerTx","Handle","HandleRange","NULL","NoAttributes","Readable","ReadableAndWriteable","Uuid128","Uuid16","Writeable","as_u16","att_type","attr_access_permissions","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","default","end","eq","eq","eq","eq","execute_write_attr","find_information","fmt","fmt","fmt","for_attrs_in_range","for_attrs_in_range","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_raw","group_end","group_end","handle","into","into","into","into","into","into","into","into","into","is_grouping_attr","is_grouping_attr","ne","new","new","new","notify_raw","prepare_write_attr","process_message","provider","read_attr_dynamic","set_value","start","to_bytes","to_bytes","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","with_sender","write_attr","Beacon","BeaconScanner","ScanCallback","beacon","borrow","borrow","borrow_mut","borrow_mut","broadcast","configure","from","from","into","into","new","new","process_adv_packet","timer_update","try_from","try_from","try_into","try_into","type_id","type_id","with_filter","ByteReader","ByteWriter","BytesOr","Field","FromBytes","ToBytes","as_raw_bytes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_left","clone","clone","clone_into","clone_into","fmt","fmt","fmt","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_ref","into","into","into","into","into_rest","into_rest","is_empty","iter","iter","new","new","only_derive_is_allowed_to_implement_this_trait","only_derive_is_allowed_to_implement_this_trait","read","read_array","read_obj","read_rest","read_slice","read_u16_le","read_u32_le","read_u64_le","read_u8","rest","skip","skip","space_left","split_next_mut","split_off","split_off","to_bytes","to_bytes","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","typed","write_slice","write_slice_truncate","write_u16_le","write_u32_le","write_u64_le","write_u8","ChannelMapper","Config","PacketQueue","Timer","Transmitter","0","0","EcdhProvider","InvalidPublicKey","P256Provider","P256SecretKey","PublicKey","RingProvider","RingSecretKey","SecretKey","SecretKey","SharedSecret","agree","agree","agree","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","from","from","from","from","from","from","from","generate_keypair","generate_keypair","generate_keypair","into","into","into","into","into","into","into","new","new","new","run_tests","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BatteryServiceAttrs","MidiServiceAttrs","borrow","borrow","borrow_mut","borrow_mut","characteristic","for_attrs_in_range","for_attrs_in_range","from","from","group_end","group_end","into","into","is_grouping_attr","is_grouping_attr","new","new","try_from","try_from","try_into","try_into","type_id","type_id","AUTH_WRITES","Appearance","BROADCAST","BarcodeScanner","BatteryLevel","BloodPressureArm","BloodPressureWrist","CardReader","Characteristic","CyclingCadenceSensor","CyclingComputer","CyclingPowerSensor","CyclingSpeedAndCadenceSensor","CyclingSpeedSensor","DigitalPen","DigitizerTablet","DurableInsulinPump","EXTENDED","Gamepad","GenericBarcodeScanner","GenericBloodPressure","GenericClock","GenericComputer","GenericContinuousGlucoseMonitor","GenericCycling","GenericDisplay","GenericEyeGlasses","GenericGlucoseMeter","GenericHeartRateSensor","GenericInsulinPump","GenericKeyring","GenericMediaPlayer","GenericMedicationDelivery","GenericOutdoorSportsActivity","GenericPersonalMobilityDevice","GenericPhone","GenericPulseOximeter","GenericRemoteControl","GenericRunningWalkingSensor","GenericTag","GenericThermometer","GenericWatch","GenericWeightScale","HeartRateBelt","HumanInterfaceDevice","INDICATE","InsulinPen","Joystick","Keyboard","LocationAndNavigationDisplayService","LocationAndNavigationPod","LocationDisplayService","LocationPod","MobilityScooter","Mouse","NOTIFY","PROPS","PatchInsulingPump","PoweredWheelchair","Properties","PulseOximeterFingertip","PulseOximeterWristWorn","READ","RunningWalkingSensorInShoe","RunningWalkingSensorOnHip","RunningWalkingSensorOnShoe","SportsWatch","ThermometerEar","UUID","Unknown","WRITE","WRITE_NO_RSP","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","contains","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","into","is_all","is_empty","ne","new","not","partial_cmp","percentage","remove","set","sub","sub_assign","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ATT","AttributeProvider","BleChannelMap","Channel","ChannelData","ChannelMapper","L2CAPState","L2CAPStateTx","LE_SECURITY_MANAGER","LE_SIGNALING","NULL","Protocol","ProtocolObj","RSP_PDU_SIZE","Sender","as_raw","att","att","att","attribute_provider","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_mapper","clone","clone_into","deref","deref_mut","empty","eq","fmt","fmt","from","from","from","from","from","from","from_bytes","hash","into","into","into","into","into","into","into_protocol","is_connection_oriented","is_connectionless","lookup","lookup","ne","new","pdu_size","process_cont","process_message","process_start","protocol","response_channel","send","send_with","to_bytes","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx","type_id","type_id","type_id","type_id","type_id","type_id","with_attributes","AddressKind","At","CONN_PARAM_REQ","CRC_POLY","Cmd","CompanyId","Connection","DeviceAddress","Disable","EXTENDED_REJECT_INDICATION","EXT_SCANNER_FILTER_POLICIES","FeatureSet","Keep","LE_ENCRYPTION","LE_PACKET_LENGTH_EXTENSION","LE_PING","LL_PRIVACY","LinkLayer","ListenAdvertising","ListenData","MIN_DATA_PAYLOAD_BUF","MIN_DATA_PDU_BUF","MIN_PACKET_BUF","MIN_PAYLOAD_BUF","MIN_PDU_BUF","NextUpdate","Off","Public","RadioCmd","Random","Responder","SLAVE_FEATURE_EXCHANGE","Transmitter","ad_structure","advertising","all","as_u16","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","connection","connection_interval","contains","data","empty","eq","eq","eq","extend","filter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_bytes","from_iter","from_raw","has_work","hash","insert","intersects","into","into","into","into","into","into","into","into","into","into","is_advertising","is_all","is_connected","is_empty","is_random","kind","l2cap","llcp","name","ne","ne","new","new","new","next_update","not","partial_cmp","process_adv_packet","process_data_packet","process_one","queue","queued_work","radio","raw","remove","set","start_advertise","sub","sub_assign","supported","timer","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","transmit_advertising","transmit_data","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_payload_buf","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_timer","access_address","channel","channel","crc_init","timeout","AdStructure","BR_EDR_NOT_SUPPORTED","CompleteLocalName","Flags","Flags","LE_GENERAL_DISCOVERABLE","LE_LIMITED_DISCOVERABLE","ManufacturerSpecificData","SIMUL_LE_BR_CONTROLLER","SIMUL_LE_BR_HOST","ServiceData16","ServiceUuids","ServiceUuids128","ServiceUuids16","ServiceUuids32","ShortenedLocalName","Unknown","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains","discoverable","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_bytes","from_bytes","from_iter","from_uuids","hash","insert","intersects","into","into","into","is_all","is_complete","is_empty","iter","le_general_discoverable","le_limited_discoverable","ne","not","partial_cmp","remove","set","sub","sub_assign","supports_classic_bluetooth","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_u8","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","company_identifier","data","data","payload","ty","uuid","ACCESS_ADDRESS","AdvDirectInd","AdvInd","AdvNonconnInd","AdvScanInd","CRC_PRESET","ConnectReq","ConnectRequest","ConnectRequestData","ConnectableDirected","ConnectableUndirected","Header","MAX_PAYLOAD_SIZE","NonconnectableUndirected","Pdu","PduBuf","PduType","Ppm0To20","Ppm101To150","Ppm151To250","Ppm21To30","Ppm251To500","Ppm31To50","Ppm51To75","Ppm76To100","ScanReq","ScanRequest","ScanResponse","ScanRsp","ScannableUndirected","SleepClockAccuracy","Unknown","access_address","advertising_data","allows_adv_data","beacon","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_map","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","connectable_directed","connectable_undirected","crc_init","discoverable","end_of_tx_window","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_header_and_payload","header","hop","interval","into","into","into","into","into","into","is_beacon","ne","new","nonconnectable_undirected","parse","payload","payload_length","receiver","rx_add","scan_request","scan_response","scannable_undirected","sender","set_payload_length","set_rx_add","set_tx_add","slave_latency","supervision_timeout","to_bytes","to_owned","to_owned","to_owned","to_owned","to_u16","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx_add","ty","type_","type_id","type_id","type_id","type_id","type_id","type_id","advertiser_addr","advertiser_addr","advertiser_addr","advertiser_addr","advertiser_addr","advertiser_addr","advertiser_addr","advertising_data","advertising_data","advertising_data","initiator_addr","initiator_addr","lldata","scan_data","scanner_addr","Control","Control","DataCont","DataCont","DataStart","DataStart","Header","Llid","Pdu","Reserved","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","empty","eq","fmt","fmt","fmt","from","from","from","from","from_bytes","into","into","into","llid","llid","md","nesn","new","parse","parse","payload_length","set_md","set_nesn","set_payload_length","set_sn","sn","to_bytes","to_bytes","to_owned","to_owned","to_u16","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","data","message","message","AddressFilter","AdvFilter","AllowAll","ScanFilter","SingleIter","SliceIter","WhitelistFilter","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from_address","from_slice","into","into","into","into","matches","matches","matches","may_connect","may_scan","new","new","new","should_scan","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ChannelMapReq","ChannelMapReq","ConnectionParamReq","ConnectionParamReq","ConnectionParamRequest","ConnectionParamRsp","ConnectionParamRsp","ConnectionUpdateData","ConnectionUpdateReq","ConnectionUpdateReq","ControlOpcode","ControlPdu","EncReq","EncRsp","FeatureReq","FeatureReq","FeatureRsp","FeatureRsp","LengthReq","LengthRsp","PauseEncReq","PauseEncRsp","PingReq","PingRsp","RejectInd","RejectIndExt","SlaveFeatureReq","StartEncReq","StartEncRsp","TerminateInd","TerminateInd","Unknown","Unknown","Unknown","UnknownRsp","UnknownRsp","V4_0","V4_1","V4_2","V5_0","V5_1","VersionInd","VersionInd","VersionNumber","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","encoded_size","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","instant","interval","into","into","into","into","into","latency","max_conn_interval","min_conn_interval","ne","ne","new","opcode","set_conn_interval","slave_latency","supervision_timeout","timeout","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","win_offset","win_size","comp_id","ctr_data","error_code","features_master","features_used","instant","map","opcode","sub_vers_nr","unknown_type","vers_nr","Consume","Consumer","Consumer","PacketQueue","Producer","Producer","SimpleConsumer","SimpleProducer","SimpleQueue","always","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","consume_pdu_with","consume_raw_with","consume_raw_with","fmt","free_space","free_space","from","from","from","from","has_data","has_data","into","into","into","into","into_result","never","new","new","on_success","produce_dyn","produce_dyn","produce_with","result","run_tests","should_consume","split","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AdvertisingChannel","DataChannel","Radio","borrow","borrow","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","cycle","eq","first","fmt","fmt","freq","freq","from","from","index","into","into","iter_all","ne","new","rf_channel","rf_channel","to_owned","to_owned","transmit","try_from","try_from","try_into","try_into","type_id","type_id","whitening_iv","whitening_iv","AuthReq","Bonding","BondingType","DisplayOnly","DisplayYesNo","ENC_KEY","ID_KEY","IoCapabilities","KeyDistribution","KeyboardDisplay","KeyboardOnly","LINK_KEY","MTU","NoBonding","NoInputNoOutput","NoSecurity","NotPresent","Oob","Present","SIGN_KEY","SecureConnections","SecurityLevel","SecurityManager","Unknown","Unknown","Unknown","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","bonding_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","into","into","into","into","into","into","is_all","is_empty","keypress","mitm","ne","no_security","not","partial_cmp","process_message","remove","secure_connection","set","set_bonding_type","set_keypress","set_mitm","set_secure_connection","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Duration","Instant","MAX_TIME_BETWEEN","T_IFS","Timer","add","add","add","add_assign","add_assign","as_micros","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","duration_since","eq","fmt","fmt","fmt","fmt","from","from","from_micros","from_millis","from_raw_micros","from_secs","into","into","ne","now","partial_cmp","raw_micros","sub","sub","sub","sub","sub_assign","sub_assign","subsec_micros","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","whole_millis","whole_secs","0","0","IsUuid","KIND","Uuid128","Uuid128","Uuid16","Uuid16","Uuid32","Uuid32","UuidKind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","into","into","into","into","ne","ne","ne","parse_static","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["rubble","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::att","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::beacon","","","","","","","","","","","","","","","","","","","","","","","","","rubble::bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::config","","","","","rubble::ecdh","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::gatt","","","","","","","","","","","","","","","","","","","","","","","","","rubble::gatt::characteristic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::l2cap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::linkrubble::link::RadioCmd","","","","","rubble::link::ad_structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::link::ad_structure::AdStructure","","","","","","rubble::link::advertising","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::link::advertising::Pdu","","","","","","","","","","","","","","","rubble::link::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::link::data::Pdu","","","rubble::link::filter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::link::llcp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::link::llcp::ControlPdu","","","","","","","","","","","rubble::link::queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::phy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::security","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble::uuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Version of the Bluetooth specification implemented by …","Unexpectedly reached EOF while reading or writing data.","Errors returned by the BLE stack.","Parsing didn’t consume the entire buffer.","Packet specified an invalid length value or was too short.","Invalid value supplied for field.","Implementation of the Attribute Protocol (ATT).","BLE beacon support, without dealing with Link-Layer stuff.","","","Utilities for decoding from and encoding into bytes.","Stack configuration trait.","Elliptic Curve Diffie-Hellman (ECDH) on P-256.","","","","","Implementation of the Generic Attribute Profile (GATT).","","The Logical Link Control and Adaptation Protocol (L2CAP).","Link-Layer.","Physical layer interactions.","The LE Security Manager protocol.","Time APIs for obtaining the current time and calculating …","","","","","BLE UUIDs (16, 32 or 128 bits).","ATT protocol UUID (either a 16 or a 128-bit UUID).","An ATT server attribute","","Trait for attribute sets that can be hosted by an …","An Attribute Protocol server providing read and write …","An ATT server handle that can send packets and initiate …","A 16-bit handle uniquely identifying an attribute on an …","A (de)serializable handle range that has been checked for …","The <code>0x0000</code> handle is not used for actual attributes, but …","An empty attribute set.","","","","","","Returns the raw 16-bit integer representing this handle.","The type of the attribute as a UUID16, EG “Primary …","Retrieves the permissions for the given attribute.","","","","","","","","","","","","","","","","","","","","","Checks if an Handle is in a HandleRange","","Returns the last (highest) attribute handle value …","","","","","In order to write data longer than what would fit one …","See BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, …","","","","Calls a closure <code>f</code> with every attribute whose handle is …","","","","","","","","","","","","","","","Create an attribute handle from a raw u16","Queries the last attribute that is part of the attribute …","","Unique server-side identifer for attribute","","","","","","","","","","Returns whether <code>uuid</code> is a valid grouping attribute type …","","","Creates an <code>AttributeServer</code> hosting attributes from an …","Creates a new attribute.","","Sends an attribute value notification to the connected …","In order to write data longer than what would fit one …","","Provides mutable access to the underlying …","If this read is from dynamic data fill the buffer and …","Overrides the previously set attribute’s value.","Returns the lowest attribute handle value included in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves the attribute’s value as a slice.","Attribute values can be any fixed length or variable …","Prepares for performing a server-initiated action (eg. …","Attempts to write data to the given attribute.","A BLE beacon.","A passive scanner for non-connectable beacon …","Callback for the <code>BeaconScanner</code>.","Called when a beacon is received and has passed the …","","","","","Broadcasts the beacon data using <code>tx</code>.","Configures the <code>BeaconScanner</code> and returns a <code>Cmd</code> to apply …","","","","","Creates a new beacon that will broadcast a packet on all …","Creates a <code>BeaconScanner</code> that will report beacons from any …","Processes a received advertising channel packet.","Updates the <code>BeaconScanner</code> after the configured timer has …","","","","","","","Creates a <code>BeaconScanner</code> with a custom device filter.","Allows reading values from a borrowed byte slice.","Wrapper around a byte slice that can be used to encode …","Reference to a <code>T</code>, or to a byte slice that can be decoded …","A zerocopy-compatible field of type <code>T</code>, but represented as …","Trait for decoding values from a byte slice.","Trait for encoding a value into a byte buffer.","Returns a reference to the raw bytes in <code>self</code>, without …","","","","","","","","","Returns the number of bytes that can still be read from …","","","","","","","","","","","","","Decode a <code>Self</code> from a byte slice, advancing <code>bytes</code> to point …","","","Creates a <code>BytesOr</code> that holds on to a <code>T</code> via reference.","","","","","Consumes <code>self</code> and returns the part of the contained …","Consumes <code>self</code> and returns the part of the contained …","Returns whether <code>self</code> is at the end of the underlying …","Returns an iterator over all <code>T</code>s stored in <code>self</code> (which is …","Returns an iterator over all <code>T</code>s stored in <code>self</code>.","Creates a writer that will write to <code>buf</code>.","Creates a new <code>ByteReader</code> that will read from the given …","","","Reads the <code>T</code>, possibly by parsing the stored bytes.","Reads a byte-array-like type <code>S</code> from <code>self</code>.","Reads a <code>zerocopy</code>-supported object from the stream by …","Reads the remaining bytes from <code>self</code>.","Reads a byte slice of length <code>len</code> from <code>self</code>.","Reads a <code>u16</code> from <code>self</code>, using Little Endian byte order.","Reads a <code>u32</code> from <code>self</code>, using Little Endian byte order.","Reads a <code>u64</code> from <code>self</code>, using Little Endian byte order.","Reads a single byte from <code>self</code>.","Returns the raw buffer this <code>ByteWriter</code> would write to.","Skips the given number of bytes in the output data …","Skips the given number of bytes in the input data without …","Returns the number of bytes that can be written to <code>self</code> …","Splits off the next byte in the buffer.","Creates and returns another <code>ByteWriter</code> that can write to …","Creates and returns another <code>ByteReader</code> that will read …","Converts <code>self</code> to bytes and writes them into <code>writer</code>, …","","","","","","","","","","","","","","","","Extracts the typed representation of <code>self</code>.","Writes all bytes from <code>other</code> to <code>self</code>.","Writes as many bytes as can fit from <code>other</code> into <code>self</code>.","Writes a <code>u16</code> to <code>self</code>, using Little Endian byte order.","Writes a <code>u32</code> to <code>self</code>, using Little Endian byte order.","Writes a <code>u64</code> to <code>self</code>, using Little Endian byte order.","Writes a single byte to <code>self</code>.","The L2CAP channel mapper in use.","Trait for Rubble stack configurations.","The packet queue to use for exchanging data between the …","A time source with microsecond resolution.","The BLE packet transmitter (radio).","","","Trait for ECDH providers.","Error returned by <code>SecretKey::agree</code> when the public key of …","An ECDH provider using the pure-Rust <code>p256</code> crate.","A secret key generated by a <code>P256Provider</code>.","A P-256 public key (point on the curve) in uncompressed …","An ECDH provider that uses <em>ring</em> under the hood.","A secret key generated by a <code>RingProvider</code>.","Secret key operations required by Rubble.","Provider-defined secret key type.","A shared secret resulting from an ECDH key agreement.","Performs ECDH key agreement using an ephemeral secret key …","","","","","","","","","","","","","","","","","","","","","","","","","","Generates a P-256 key pair using cryptographically strong …","","","","","","","","","","Creates a new instance.","Creates a new <code>RingProvider</code> that uses the system’s RNG …","Creates a new <code>InvalidPublicKey</code> error.","Runs Rubble’s P-256 provider testsuite against <code>provider</code>.","","","","","","","","","","","","","","","","","","","","","","","A demo <code>AttributeProvider</code> that will enumerate as a <em>Battery …","A demo <code>AttributeProvider</code> that will enumerate as a <em>Midi …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The UUID assigned to the characteristic type.","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Toggles the specified flags in-place.","","","","","","","","","","The channel used by the Attribute Protocol (ATT).","The attribute provider used by the ATT server.","A fixed BLE channel map that provides only the required …","An L2CAP channel identifier (CID).","Data associated with a connected L2CAP channel.","Trait for L2CAP channel mappers that provide access to …","L2CAP channel manager and responder.","An <code>L2CAPState</code> with the ability to transmit packets.","LE Security Manager channel.","LE L2CAP signaling channel (connectionless).","The null channel identifier. Must not be used as a …","Trait for protocols that sit on top of L2CAP …","Trait for protocols that sit on top of L2CAP (object-safe …","Minimum size needed by PDUs sent by this protocol.","Provides a way to send a L2CAP message with preallocated …","Returns the channel identifier (CID) as a raw <code>u16</code>.","Returns information about the Attribute Protocol on …","","Prepares for sending data using the Attribute Protocol.","Provides mutable access to the underlying …","","","","","","","","","","","","","Provides mutable access to the underlying <code>ChannelMapper</code>.","","","","","Creates a new channel map with no backing data for the …","","","","","","","","","","","","","","","","","","Consumes <code>self</code> and returns the protocol connected to the …","Returns whether this channel is connection-oriented.","Returns whether this channel is connectionless.","Look up what’s connected to <code>channel</code> (eg. the <code>Protocol</code> …","","","Creates a new L2CAP state using the given channel …","Returns the PDU size required by the protocol.","Process continuation of an L2CAP message.","Process a message sent to the protocol.","Process the start of a new L2CAP message (or a complete, …","Returns the protocol connected to the channel.","Returns the <code>Channel</code> to which the response should be sent.","Enqueues an L2CAP message to be sent over the data …","Enqueues an L2CAP message encoded by a closure.","","","","","","","","","","","","","","","Gives this instance the ability to transmit packets.","","","","","","","","Specifies whether a device address is randomly generated …","Call <code>update</code> at the given <code>Instant</code>.","Connection parameters request procedure.","The CRC polynomial to use for CRC24 generation.","Command returned by the Link-Layer to the user.","Company identifier for use in link layer Control PDUs.","Connection state and parameters.","A Bluetooth device address.","Disable timer and do not call <code>update</code>.","Support for the LL Control PDU <code>LL_REJECT_IND_EXT</code>.","Extended scan filter policies.","A set of optional Link Layer features.","Keep the previously configured time.","Low-Energy data encryption.","Link-Layer PDU length update (support for data channel …","Low-Energy Link-Layer ping exchange.","Support for untrackable randomized device addresses (LL …","Implementation of the real-time BLE Link-Layer logic.","Listen on an advertising channel. If a packet is …","Listen on a data channel. If a matching packet is …","Min. size a data PDU payload buffer must have (assuming …","Min. size a data PDU buffer must have.","Min. size a buffer for Link-Layer packets must have to …","Min. size a PDU payload buffer must have (to cover both …","Min. size a Link-Layer PDU buffer must have (to cover …","Specifies when the Link Layer’s <code>update</code> method should be …","Turn the radio off and don’t call <code>LinkLayer::process_*</code> …","Publicly registered IEEE 802-2001 LAN MAC address.","Specifies if and how the radio should listen for …","Randomly generated address.","Data channel packet processor.","Slave-initiated feature exchange.","Trait for Link Layer packet transmission.","Advertising Data / Extended Inquiry Response (EIR) data.","Advertising channel operations.","Returns the set containing all flags.","Get the raw <code>u16</code> representing this company identifier.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the connection state.","Returns the configured interval between connection events.","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Data Channel structures.","Returns an empty set of flags","","","","","Link-Layer Device Filtering.","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Create a company ID from a raw <code>u16</code>.","Returns <code>true</code> when this responder has work to do.","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","Returns whether the Link-Layer is currently broadcasting …","Returns <code>true</code> if all flags are currently set.","Returns whether the Link-Layer is currently connected.","Returns <code>true</code> if no flags are currently stored.","Returns whether this address is randomly generated.","Returns the address kind.","Obtains access to the L2CAP instance.","Defines packet structures used by the Link Layer Control …","Get the full company name from this identifer.","","","Creates a new packet processor hooked up to data channel …","Creates a new Link-Layer.","Create a new device address from 6 raw Bytes and an …","Time until <code>LinkLayer::update</code> should be called.","Returns the complement of this set of flags.","","Process an incoming packet from an advertising channel.","Process an incoming data channel packet.","Processes a single incoming packet in the packet queue.","An SPSC queue for data channel PDUs.","Whether the Link-Layer code has enqueued more work into …","Radio configuration request.","Returns the raw bytes making up this address (LSB first).","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Starts advertising this device, optionally sending data …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the feature set supported by Rubble.","Returns a reference to the timer instance used by the …","","","","","","","","","","Toggles the specified flags in-place.","Transmit an Advertising Channel PDU.","Transmit a Data Channel PDU.","","","","","","","","","","","","","","","","","","","","","Get a reference to the Transmitter’s PDU payload buffer.","","","","","","","","","","","Update the Link-Layer state after the timer expires.","The Access Address to listen for.","The advertising channel to listen on.","The data channel to listen on.","Initialization value of the CRC-24 calculation.","Flag to indicate if the last connection event timed out.","A list of AD structures can be sent along with an …","","Sets the full (unabbreviated) device name.","BR/EDR and LE compatibility flags.","Device flags and baseband capabilities.","","","Set manufacturer specific data","","","Service data with 16-bit service UUID.","List of service UUIDs offered by the device.","","","","Sets the shortened device name.","An unknown or unimplemented AD structure stored as raw …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns flags suitable for non-connectable devices that …","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns flags suitable for discoverable devices that want …","Returns an empty set of flags","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","Creates a <code>ServiceUuids</code> container from a list of UUIDs.","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns a boolean indicating whether this list is …","Returns <code>true</code> if no flags are currently stored.","Returns an iterator over the UUIDs stored in <code>self</code>.","Device operating in LE General Discoverable mode.","Device operating in LE Limited Discoverable mode.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns a boolean indicating whether the device that sent …","Lowers this AD structure into a Byte buffer.","","","","","Returns the raw representation of the flags.","Toggles the specified flags in-place.","","","","","","","","","","","The associated service data. May be empty.","Raw data transmitted after the type.","","Type byte.","The 16-bit service UUID.","Access Address to use for all advertising channel packets.","Connectable directed advertising event (<code>ADV_DIRECT_IND</code>).","Connectable undirected advertising event (<code>ADV_IND</code>).","Non-connectable undirected advertising event (…","Scannable undirected advertising event (<code>ADV_SCAN_IND</code>).","CRC initialization value for advertising channel packets.","Connect request (<code>CONNECT_REQ</code>).","A request to establish a connection, sent by an …","Connection parameters sent along with a <code>ConnectRequest</code> …","Directed connectable advertisement sent to an initiator.","Connectable and scannable advertisement.","16-bit Advertising Channel PDU header preceding the …","Max. advertising PDU payload size in Bytes.","A non-connectable undirected advertisement (aka “beacon…","A parsed advertising channel PDU.","Stores an advertising channel PDU.","4-bit PDU type in <code>Header</code>.","","","","","","","","","Scan request (<code>SCAN_REQ</code>).","Scan request sent from a scanner to an advertising device.","Response to a scan request, sent by the scanned …","Scan response (<code>SCAN_RSP</code>).","Scannable advertisement.","Indicates the master’s sleep clock accuracy (SCA) in …","","Returns the Access Address to use for data channel …","Returns an iterator over all AD structures encoded in the …","Whether AD structures can follow the fixed data in a PDU …","Creates an advertising channel PDU suitable for building …","","","","","","","","","","","","","Returns the channel map specified by the initiator.","","","","","","","","","Creates a connectable directed advertising PDU (…","Creates a connectable undirected advertising PDU (<code>ADV_IND</code>…","Returns the initialization value for the CRC calculation.","Creates an advertising PDU that makes this device “…","Returns the end of the transmit window from reception of …","","","","","","","","","","","","","","","","","","Constructs a PDU by parsing <code>payload</code>.","","Returns the channel hop distance.","Returns the connection event interval in µs.","","","","","","","Returns whether this PDU type is a beacon advertisement.","","Creates a new Advertising Channel PDU header specifying …","Creates a non-connectable undirected advertising PDU (…","","","Returns the length of the payload in octets as specified …","Returns the intended receiver of this PDU.","Returns the state of the <code>RxAdd</code> field.","Creates a scan request PDU.","Creates a scan response PDU.","Creates a scannable undirected advertising PDU (…","Returns the device address of the sender of this PDU.","Sets the payload length of this PDU.","Sets the <code>RxAdd</code> field’s value.","Sets the <code>TxAdd</code> field’s value.","Returns the slave latency (as the number of connection …","Returns the connection supervision timeout (…","","","","","","Returns the raw representation of the header.","","","","","","","","","","","","","Returns the state of the <code>TxAdd</code> field.","Returns the PDU type of <code>self</code>.","Returns the PDU type specified in the header.","","","","","","","Address of the advertising device that is sending this …","Address of the advertising device that is sending this …","Address of the advertising device (beacon) that is …","Address of the advertising device that is sending this …","Address of the advertising device that should be scanned.","Address of the advertising device that responds to a scan …","Address of the intended receiver of this packet.","AD structures sent along with the advertisement.","AD structures sent along with the advertisement.","AD structures sent along with the advertisement.","Intended receiver of the advertisement.","Address of the device initiating the connection by …","Connection parameters.","Scan data payload, consisting of additional user-defined …","Address of the scanning device sending this PDU.","LL control PDU.","LL Control PDU for controlling the Link-Layer connection.","Continuation of L2CAP message, or empty PDU.","Continuation of an L2CAP message (or empty PDU).","Start of L2CAP message.","Start of an L2CAP message (must not be empty).","16-bit data channel header preceding the payload.","Values of the LLID field in <code>Header</code>.","Structured representation of a data channel PDU.","Reserved for future use.","","","","","","","","","","","Creates an empty PDU that carries no message.","","","","","","","","","","","","","Returns the <code>LLID</code> field (PDU type).","Returns the <code>LLID</code> field to use for this PDU.","Returns whether the <code>MD</code> field is set (More Data).","Returns the value of the <code>NESN</code> field (Next Expected …","Creates a header with the given LLID field and all other …","Parses a header from raw bytes.","Parses a PDU from a <code>Header</code> and raw payload.","Returns the length of the payload in octets as specified …","Sets the value of the <code>MD</code> field.","Sets the value of the <code>NESN</code> field.","Sets the payload length field to <code>len</code>.","Sets the value of the <code>SN</code> field.","Returns the value of the <code>SN</code> field (Sequence Number).","","","","","Returns the raw representation of the header.","","","","","","","","","","","","","","Advertising filter policy. Governs which devices may scan …","An <code>AddressFilter</code> that allows all devices (ie. no …","Scanner filter policy. Governs which devices will be …","","","An <code>AddressFilter</code> that checks device addresses against a …","","","","","","","","","","","","","Creates a device whitelist that will allow a single …","Creates a device whitelist from a slice of device …","","","","","","","","","","Creates a device whitelist from an iterator yielding the …","Creates a new filter policy from behaviors for scan and …","Creates a new scanner filter policy from an <code>AddressFilter</code>.","","","","","","","","","","","","","","<code>0x01</code>/<code>LL_CHANNEL_MAP_REQ</code> - Update the channel map.","","","","A connection parameter update request or response (…","","","Data transmitted with an <code>LL_CONNECTION_UPDATE_REQ</code> Control …","<code>0x00</code>/<code>LL_CONNECTION_UPDATE_REQ</code> - Update connection …","","Enumeration of all known LL Control PDU opcodes (not all …","A structured representation of an LL Control PDU used by …","","","<code>0x08</code>/<code>LL_FEATURE_REQ</code> - Master requests slave’s features.","","<code>0x09</code>/<code>LL_FEATURE_RSP</code> - Slave answers <code>LL_FEATURE_REQ</code> with …","","","","","","","","","","","","","<code>0x02</code>/<code>LL_TERMINATE_IND</code> - Close the connection.","","Catch-all variant for unsupported opcodes.","","","<code>0x07</code>/<code>LL_UNKNOWN_RSP</code> - Response to unknown/unsupported LL …","","","","","","","<code>0x0C</code>/<code>LL_VERSION_IND</code> - Bluetooth version indication (sent …","","Enumeration of all possible <code>VersNr</code> for <code>LL_VERSION_IND</code> …","","","","","","","","","","","","","","","","","","","","","Returns the encoded size of this LLCPDU, including the …","","","","","","","","","","","","","","","","","Returns the instant at which these changes should take …","Returns the duration between connection events.","","","","","","Returns the slave latency.","Returns the maximum requested connection interval.","Returns the minimum requested connection interval.","","","Creates a new connection update request structure filled …","Returns the opcode of this LL Control PDU.","Sets the minimum and maximum requested connection …","Returns the slave latency in number of connection events.","Returns the supervision timeout.","Returns the connection supervision timeout (…","","","","","","","","","","","","","","","","","","","","","","","Returns the offset of the transmit window, as a duration …","Returns the size of the transmit window for the first PDU …","","Additional data depending on the opcode.","","Supported feature set of the master.","Features that will be used for the connection. Logical <code>AND</code>…","","","The opcode we don’t support. This can also be the …","","Opcode of the unknown PDU.","","Bundles a <code>T</code> along with information telling a queue …","The consuming (reading) half of a packet queue.","Consuming (reading) half of the queue.","A splittable SPSC queue for data channel PDUs.","The producing (writing) half of a packet queue.","Producing (writing) half of the queue.","Consumer (reader) half returned by <code>SimpleQueue::split</code>.","Producer (writer) half returned by <code>SimpleQueue::split</code>.","A simple packet queue that can hold a single packet.","Consume the currently processed packet, then return <code>result</code>…","","","","","","","","","Passes the next packet in the queue to a closure.","Passes the next raw packet in the queue to a closure.","","","Returns the largest payload size that can be successfully …","","","","","","Returns whether there is a packet to dequeue.","","","","","","Unwraps this <code>consume</code>, retrieving the inner result.","Do not consume the currently processed packet, then …","Creates a new, empty queue.","Consume the currently processed packet iff <code>consume</code> is <code>true</code>…","Consume the currently processed packet if <code>result</code> …","Enqueues a PDU with known size using a closure.","","Enqueues a PDU with known size using a closure.","Retrieves a reference to the inner result.","Runs Rubble’s packet queue testsuite against the given …","Retrieves whether the packet should be removed from the …","Splits the queue into its producing and consuming ends.","","","","","","","","","","","","","One of the three advertising channels (channel indices …","One of 37 data channels on which data channel PDUs are …","Trait for raw 2.4 GHz non-BLE-specific radios.","","","","","Returns the channel index.","","","","","Returns the next advertising channel, or the first one if …","","Returns the first (lowest-numbered) advertising channel.","","","Returns the center frequency of this channel in MHz.","Returns the center frequency of this channel in MHz.","","","Returns the data channel index.","","","Returns an iterator that yields all 3 advertising …","","Creates a <code>DataChannel</code> from a raw index.","Returns the physical RF channel corresponding to this …","Returns the RF channel corresponding to this data channel …","","","Transmit every Byte in <code>buf</code> over the air, LSb first, at …","","","","","","","Calculates the initial value of the LFSR to use for data …","Calculates the initial value of the LFSR to use for data …","Authentication requirements exchanged during pairing …","Permanently store the exchanged keys to allow resuming …","Whether to perform bonding in addition to pairing.","Device can display a 6-digit number, but has no input …","Device can display a 6-digit number and the user can …","","","Describes the I/O capabilities of a device that can be …","Indicates which types of keys a device requests for …","Device can display a 6-digit passcode and allows passcode …","Device does not have output capability, but the user can …","","The L2CAP MTU required by this security level.","No bonding should be performed; the exchanged keys should …","Device has no meaningful input and output capabilities.","<em>LE Secure Connections</em> are not supported and will not be …","","","","","Indicates support for <em>LE Secure Connections</em>.","Supported security levels.","The LE Security Manager.","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Returns the requested bonding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns whether MITM protection is requested.","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Returns whether <em>LE Secure Connection</em> pairing is supported …","Inserts or removes the specified flags depending on the …","","","","Sets whether <em>LE Secure Connection</em> pairing is supported …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","A duration with microsecond resolution.","A point in time, relative to an unspecfied epoch.","The maximum time between two <code>Instant</code>s that can be handled …","The duration of the interframe spacing between BLE …","Trait for time providers.","","","","","","Returns the number of microseconds represented by <code>self</code>.","","","","","","","","","","Calculates the duration of time that has passed between …","","","","","","","","Creates a <code>Duration</code> from a number of microseconds.","Creates a <code>Duration</code> representing the given number of …","Creates an <code>Instant</code> from raw microseconds since an …","Creates a <code>Duration</code> representing a number of seconds.","","","","Obtain the current time as an <code>Instant</code>.","","Returns the raw value from which this <code>Instant</code> was created.","","","","","","","Returns the fractional part of microseconds in <code>self</code>.","","","","","","","","","","","Returns the number of whole milliseconds that fit in <code>self</code>.","Returns the number of whole seconds that fit in <code>self</code>.","","","Marker for UUID types.","","A full 128-bit UUID.","","A 16-bit UUID alias.","","A 32-bit UUID alias.","","List of the supported UUID types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 128-bit UUID from 16 raw bytes (encoded in …","","","","","","","","Parses a UUID string literal, panicking when the string …","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,2,0,3,3,4,4,3,2,5,6,7,8,5,3,9,2,10,4,7,8,5,3,9,2,10,4,2,4,2,4,10,3,10,2,4,4,4,6,6,2,10,4,6,9,7,8,5,3,9,2,10,4,4,4,4,2,4,2,6,9,5,7,8,5,3,9,2,10,4,4,6,9,2,7,5,10,8,6,7,7,6,5,10,2,4,2,4,7,8,5,3,9,2,10,4,7,8,5,3,9,2,10,4,7,8,5,3,9,2,10,4,5,5,7,6,0,0,0,11,12,13,12,13,12,13,12,13,12,13,12,13,13,13,12,13,12,13,12,13,13,0,0,0,0,0,0,14,15,16,14,17,15,16,14,17,14,15,17,15,17,15,15,17,15,15,16,14,17,18,15,15,15,15,16,14,17,16,14,14,15,15,16,14,17,17,15,14,14,14,14,14,14,14,14,16,16,14,16,16,16,14,19,15,15,17,15,16,14,17,15,16,14,17,15,16,14,17,17,16,16,16,16,16,16,20,0,20,20,20,21,22,0,0,0,0,0,0,0,0,23,0,24,25,26,27,25,28,26,21,22,29,27,25,28,26,21,22,29,29,29,27,25,28,26,21,22,29,23,27,28,27,25,28,26,21,22,29,27,28,29,0,29,27,25,28,26,21,22,29,27,25,28,26,21,22,29,27,25,28,26,21,22,29,0,0,30,31,30,31,0,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,32,0,32,33,0,33,33,33,0,33,33,33,33,33,33,33,33,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,32,33,33,33,33,33,33,33,33,33,32,34,33,33,0,33,33,32,33,33,33,33,33,34,33,32,32,32,32,32,32,32,32,32,32,35,32,33,35,32,33,32,33,32,33,32,32,32,32,33,32,32,32,32,32,32,35,32,33,32,32,32,32,32,32,32,35,32,33,32,32,32,35,32,32,35,32,32,32,32,32,33,32,35,32,33,35,32,33,35,32,33,36,37,0,0,0,0,0,0,36,36,36,0,0,38,0,36,37,39,40,39,41,39,42,40,36,43,41,39,42,40,36,43,43,36,36,40,40,39,36,36,43,41,39,42,40,36,43,36,36,41,39,42,40,36,43,41,36,36,37,39,36,43,41,40,44,40,41,41,42,42,36,36,41,39,42,40,36,43,41,39,42,40,36,43,43,41,39,42,40,36,43,39,0,45,46,0,0,0,0,0,45,46,46,0,45,46,46,46,46,0,47,47,0,0,0,0,0,0,47,48,0,48,0,46,0,0,0,46,49,46,46,46,46,46,46,46,50,51,52,49,48,53,46,54,45,47,50,51,52,49,48,53,46,54,45,47,49,48,53,46,54,45,47,49,48,53,46,54,45,47,46,52,50,46,0,46,48,53,46,46,0,49,48,53,53,46,46,46,46,46,54,45,47,50,51,52,49,48,53,46,54,45,47,46,46,46,46,46,49,51,46,46,46,50,51,52,49,48,53,46,54,45,47,52,46,52,46,53,53,51,0,49,53,46,51,52,53,54,46,46,52,52,51,0,54,54,53,46,46,52,46,46,46,52,46,49,48,53,46,54,45,47,53,46,55,55,50,51,52,49,48,53,46,54,45,47,50,51,52,49,48,53,46,54,45,47,55,50,51,52,49,48,53,46,54,45,47,52,56,57,56,56,56,0,58,59,0,59,58,58,59,58,58,59,0,59,59,59,59,59,58,58,58,58,58,58,58,58,59,60,58,59,60,58,58,59,60,58,59,60,58,58,58,58,58,58,58,59,60,58,58,58,58,58,59,59,60,58,58,58,58,59,60,58,60,58,58,58,59,60,58,58,60,58,60,58,58,58,58,58,58,58,58,58,58,59,60,59,60,58,58,58,59,60,58,59,60,58,59,60,58,61,62,63,61,63,62,0,64,64,64,64,0,64,65,0,65,65,0,0,65,0,0,0,66,66,66,66,66,66,66,66,64,65,65,64,65,0,64,67,65,64,68,68,65,67,66,69,64,68,65,67,66,69,64,67,65,67,66,69,65,67,66,69,68,68,67,68,67,64,68,65,67,66,69,64,68,65,67,66,69,64,64,65,67,69,65,68,67,67,68,65,67,66,69,64,64,64,69,68,69,68,69,65,69,68,68,68,65,69,69,69,67,67,69,65,67,66,69,69,68,65,67,66,69,64,68,65,67,66,69,64,69,65,69,68,65,67,66,69,64,70,71,72,73,74,75,76,70,72,73,71,76,76,75,74,77,78,77,78,77,78,0,0,0,77,79,77,78,79,77,78,79,77,79,77,78,77,79,77,78,79,77,78,78,79,79,77,78,79,78,79,79,79,79,78,79,79,79,79,79,79,79,78,79,77,79,79,77,78,79,77,78,79,77,78,80,81,82,0,0,0,0,0,0,0,83,84,85,86,83,84,85,86,83,84,85,86,84,84,83,84,85,86,87,83,84,85,85,84,85,86,86,83,84,85,86,83,84,85,86,83,84,85,86,88,89,88,89,0,88,89,0,88,89,0,0,89,89,88,89,88,89,89,89,89,89,89,89,89,89,89,89,89,88,89,88,89,90,88,89,90,90,90,90,90,88,89,0,91,92,88,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,89,90,88,89,90,91,92,88,89,90,91,92,88,89,89,90,90,91,88,92,92,91,92,88,89,90,92,91,91,89,90,91,88,91,91,91,92,91,88,91,92,88,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,89,90,92,92,93,94,95,96,97,98,98,94,93,99,93,0,0,100,0,0,100,0,0,0,101,102,103,104,101,102,103,104,101,105,105,104,101,106,103,102,103,104,101,105,104,102,103,104,101,101,101,102,101,101,106,103,106,101,0,101,100,102,103,104,101,102,103,104,101,102,103,104,101,0,0,0,107,108,107,108,107,107,108,107,108,107,108,107,107,108,107,108,107,108,108,107,108,107,108,108,107,108,107,108,109,107,108,107,108,107,108,107,108,0,110,0,111,111,112,112,0,0,111,111,112,113,110,111,0,114,0,114,112,0,0,0,111,114,110,112,112,112,112,112,112,112,112,115,116,117,118,111,114,115,110,112,116,117,118,111,114,115,110,112,111,114,115,110,112,111,114,115,110,112,112,112,112,112,112,116,117,118,111,114,115,110,112,112,112,112,112,116,117,118,111,111,114,114,115,115,110,110,112,112,112,112,112,112,112,112,112,116,117,118,111,114,115,110,112,112,112,115,115,112,118,112,112,118,112,115,112,115,115,115,115,112,112,111,114,115,110,112,112,116,117,118,111,114,115,110,112,116,117,118,111,114,115,110,112,116,117,118,111,114,115,110,112,0,0,119,120,0,120,120,119,120,119,120,120,119,120,119,120,119,120,119,120,119,120,120,120,119,119,120,119,120,120,119,120,120,119,120,121,120,119,120,120,119,119,120,119,120,120,119,120,119,120,119,120,119,120,119,120,120,122,123,0,124,0,125,0,125,0,125,0,122,123,126,125,122,123,126,125,122,123,126,125,122,123,126,125,122,123,126,122,123,126,125,122,123,123,126,126,126,125,122,123,126,126,122,123,126,125,122,123,126,126,122,123,126,122,123,126,125,122,123,126,125,122,123,126,125,122,123,126,125],"f":[null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],null,[[]],null,null,null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u16",15]],null,[[["handle",3]],["attributeaccesspermissions",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["handle",3]],[[],["attuuid",4]],[[]],[[]],[[["handle",3]],["bool",15]],[[]],[[],["handle",3]],[[["handle",3]],["bool",15]],[[],["bool",15]],[[["uuid16",3]],["bool",15]],[[["uuid128",3]],["bool",15]],[[["u8",15]],[["error",4],["result",4]]],[[["sender",3],["handlerange",3]],[["error",4],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["handlerange",3]],[["error",4],["result",4]]],[[["handlerange",3]],[["error",4],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["uuid128",3]]],[[["uuid32",3]]],[[["uuid16",3]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["u16",15]]],[[["handle",3]],[["option",4],["attribute",3]]],[[["handle",3]],[["option",4],["attribute",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uuid128",3]],[[]],[[["attuuid",4]],["bool",15]],[[["attuuid",4]],["bool",15]],[[["handle",3]],["bool",15]],[[]],[[["handle",3],["attuuid",4]]],[[["handle",3]]],[[["handle",3]]],[[["handle",3],["u16",15]],[["error",4],["result",4]]],[[["sender",3]],[["error",4],["result",4]]],[[]],[[["handle",3]],[["usize",15],["option",4]]],[[]],[[],["handle",3]],[[["bytewriter",3]],[["error",4],["result",4]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[["sender",3]],["attributeservertx",3]],[[["handle",3]],[["error",4],["result",4]]],null,null,null,[[["deviceaddress",3]]],[[]],[[]],[[]],[[]],[[]],[[["duration",3],["instant",3]],["cmd",3]],[[]],[[]],[[]],[[]],[[["deviceaddress",3]],[["result",4],["error",4]]],[[]],[[["bool",15],["header",3]],["cmd",3]],[[["instant",3]],["cmd",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["error",4]]],[[],[["error",4],["result",4]]],[[]],[[["usize",15]],[["result",4],["error",4]]],[[],[["result",4],["error",4],["u16",15]]],[[],[["u32",15],["result",4],["error",4]]],[[],[["error",4],["u64",15],["result",4]]],[[],[["error",4],["result",4],["u8",15]]],[[]],[[["usize",15]],[["error",4],["result",4]]],[[["usize",15]],[["error",4],["result",4]]],[[],["usize",15]],[[],[["option",4],["u8",15]]],[[["usize",15]],[["result",4],["error",4]]],[[["usize",15]],[["result",4],["error",4]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],[["error",4],["result",4]]],[[],["usize",15]],[[["u16",15]],[["error",4],["result",4]]],[[["u32",15]],[["error",4],["result",4]]],[[["u64",15]],[["error",4],["result",4]]],[[["u8",15]],[["error",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["publickey",3]],[["invalidpublickey",3],["sharedsecret",3],["result",4]]],[[["publickey",3]],[["invalidpublickey",3],["sharedsecret",3],["result",4]]],[[["publickey",3]],[["invalidpublickey",3],["sharedsecret",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],null,[[["handlerange",3]],[["error",4],["result",4]]],[[["handlerange",3]],[["error",4],["result",4]]],[[]],[[]],[[["handle",3]],[["option",4],["attribute",3]]],[[["handle",3]],[["option",4],["attribute",3]]],[[]],[[]],[[["attuuid",4]],["bool",15]],[[["attuuid",4]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["properties",3]],[[["properties",3]],["properties",3]],[[["properties",3]]],[[["properties",3]],["properties",3]],[[["properties",3]]],[[],["u8",15]],[[["properties",3]],["properties",3]],[[["properties",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["properties",3]],[[],["appearance",4]],[[]],[[]],[[["properties",3]],["ordering",4]],[[["properties",3]],["bool",15]],[[],["properties",3]],[[["properties",3]],["bool",15]],[[["appearance",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u8",15]],[["option",4],["properties",3]]],[[["u8",15]],["properties",3]],[[["u8",15]],["properties",3]],[[["intoiterator",8]],["properties",3]],[[]],[[["properties",3]]],[[["properties",3]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["properties",3]],["bool",15]],[[["u8",15]]],[[],["properties",3]],[[["properties",3]],[["option",4],["ordering",4]]],[[],["u8",15]],[[["properties",3]]],[[["properties",3],["bool",15]]],[[["properties",3]],["properties",3]],[[["properties",3]]],[[]],[[]],[[["properties",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u16",15]],[[],[["attributeserver",3],["channeldata",3]]],[[],[["attributeserver",3],["channeldata",3]]],[[],[["attributeservertx",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["channel",3]],[[]],[[]],[[]],[[]],[[["channel",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bytereader",3]],[["result",4],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["channel",3]],[["option",4],["channeldata",3]]],[[["channel",3]],[["option",4],["channeldata",3]]],[[["channel",3]],["bool",15]],[[]],[[],["u8",15]],[[],["consume",3]],[[["sender",3]],[["error",4],["result",4]]],[[],["consume",3]],[[]],[[],["channel",3]],[[["tobytes",8]],[["error",4],["result",4]]],[[],["result",4]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["l2capstatetx",3],["producer",8]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["featureset",3]],[[],["u16",15]],[[["featureset",3]],["featureset",3]],[[["featureset",3]]],[[["featureset",3]],["featureset",3]],[[["featureset",3]]],[[],["u64",15]],[[["featureset",3]],["featureset",3]],[[["featureset",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["companyid",3]],[[],["addresskind",4]],[[],["deviceaddress",3]],[[],["featureset",3]],[[],["cmd",3]],[[],["nextupdate",4]],[[],["radiocmd",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["featureset",3]],["ordering",4]],[[],[["option",4],["connection",3]]],[[],["duration",3]],[[["featureset",3]],["bool",15]],null,[[],["featureset",3]],[[["addresskind",4]],["bool",15]],[[["deviceaddress",3]],["bool",15]],[[["featureset",3]],["bool",15]],[[["intoiterator",8]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4],["featureset",3]]],[[["u64",15]],["featureset",3]],[[["u64",15]],["featureset",3]],[[["bytereader",3]],[["result",4],["error",4]]],[[["intoiterator",8]],["featureset",3]],[[["u16",15]]],[[],["bool",15]],[[]],[[["featureset",3]]],[[["featureset",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["addresskind",4]],[[],["l2capstatetx",3]],null,[[],[["str",15],["option",4]]],[[["deviceaddress",3]],["bool",15]],[[["featureset",3]],["bool",15]],[[["l2capstate",3]]],[[["deviceaddress",3]]],[[["addresskind",4]]],null,[[],["featureset",3]],[[["featureset",3]],[["option",4],["ordering",4]]],[[["bool",15],["instant",3],["header",3]],["cmd",3]],[[["bool",15],["instant",3],["header",3]],["cmd",3]],[[],[["error",4],["result",4]]],null,null,null,[[]],[[["featureset",3]]],[[["bool",15],["featureset",3]]],[[["duration",3]],[["nextupdate",4],["error",4],["result",4]]],[[["featureset",3]],["featureset",3]],[[["featureset",3]]],[[]],[[]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["featureset",3]]],[[["advertisingchannel",3],["header",3]]],[[["u32",15],["datachannel",3],["header",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["cmd",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["flags",3]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[],["u8",15]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["flags",3]],[[],["adstructure",4]],[[],["serviceuuids",3]],[[],["flags",3]],[[]],[[]],[[]],[[["flags",3]],["ordering",4]],[[["flags",3]],["bool",15]],[[],["flags",3]],[[],["flags",3]],[[["flags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["flags",3]]],[[]],[[]],[[]],[[["u8",15]],[["option",4],["flags",3]]],[[["u8",15]],["flags",3]],[[["u8",15]],["flags",3]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["intoiterator",8]],["flags",3]],[[["bool",15]]],[[]],[[["flags",3]]],[[["flags",3]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["flags",3]],["bool",15]],[[],["flags",3]],[[["flags",3]],[["option",4],["ordering",4]]],[[["flags",3]]],[[["bool",15],["flags",3]]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[],["bool",15]],[[["bytewriter",3]],[["error",4],["result",4]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[]],[[]],[[],["u8",15]],[[["flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],[[],["option",4]],[[],["bool",15]],[[["deviceaddress",3]],[["result",4],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["channelmap",3]],[[],["pdu",4]],[[],["connectrequestdata",3]],[[],["sleepclockaccuracy",4]],[[],["header",3]],[[]],[[]],[[]],[[]],[[["deviceaddress",3]]],[[["deviceaddress",3]],[["result",4],["error",4]]],[[],["u32",15]],[[["deviceaddress",3]],[["result",4],["error",4]]],[[],["duration",3]],[[["pdutype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["header",3],["bytereader",3]],[["result",4],["error",4]]],[[],["header",3]],[[],["u8",15]],[[],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["pdutype",4]],["bool",15]],[[["pdutype",4]]],[[["deviceaddress",3]],[["result",4],["error",4]]],[[]],[[]],[[],["u8",15]],[[],[["deviceaddress",3],["option",4]]],[[],["bool",15]],[[["deviceaddress",3]],[["result",4],["error",4]]],[[["deviceaddress",3]],[["result",4],["error",4]]],[[["deviceaddress",3]],[["result",4],["error",4]]],[[],["deviceaddress",3]],[[["u8",15]]],[[["bool",15]]],[[["bool",15]]],[[],["u16",15]],[[],["duration",3]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["pdutype",4]],[[],["pdutype",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["header",3]],[[],["llid",4]],[[]],[[]],[[]],[[["llid",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["controlpdu",4]]],[[]],[[["bytereader",3]],[["result",4],["error",4]]],[[]],[[]],[[]],[[],["llid",4]],[[],["llid",4]],[[],["bool",15]],[[],["seqnum",3]],[[["llid",4]]],[[]],[[["header",3]],[["result",4],["error",4]]],[[],["u8",15]],[[["bool",15]]],[[["seqnum",3]]],[[["u8",15]]],[[["seqnum",3]]],[[],["seqnum",3]],[[["bytewriter",3]],[["error",4],["result",4]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[]],[[],["u16",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["deviceaddress",3]]],[[]],[[]],[[]],[[]],[[]],[[["deviceaddress",3]],["bool",15]],[[["deviceaddress",3]],["bool",15]],[[["deviceaddress",3]],["bool",15]],[[["deviceaddress",3]],["bool",15]],[[["deviceaddress",3]],["bool",15]],[[]],[[]],[[]],[[["deviceaddress",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["connectionparamrequest",3]],[[],["connectionupdatedata",3]],[[],["controlpdu",4]],[[],["controlopcode",4]],[[],["versionnumber",4]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[["controlopcode",4]],["bool",15]],[[["versionnumber",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[["u8",15]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[],["u16",15]],[[],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["duration",3]],[[],["duration",3]],[[["controlopcode",4]],["bool",15]],[[["versionnumber",4]],["bool",15]],[[]],[[],["controlopcode",4]],[[["duration",3]]],[[],["u16",15]],[[],["duration",3]],[[],["duration",3]],[[["bytewriter",3]],[["error",4],["result",4]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["duration",3]],[[],["duration",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["result",4],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[["formatter",3]],["result",6]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],[["result",4],["error",4]]],[[["result",4],["error",4]]],[[]],[[["bool",15],["result",4],["error",4]]],[[["result",4],["error",4]]],[[["u8",15],["fnmut",8]],[["error",4],["result",4]]],[[["u8",15],["fnmut",8]],[["error",4],["result",4]]],[[["u8",15]],["result",4]],[[],["result",4]],[[]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["advertisingchannel",3]],[[],["datachannel",3]],[[]],[[]],[[]],[[["datachannel",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["u16",15]],[[],["u16",15]],[[]],[[]],[[],["u8",15]],[[]],[[]],[[]],[[["datachannel",3]],["bool",15]],[[["u8",15]]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[["u16",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["u8",15]],[[],["u8",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["keydistribution",3]],[[["keydistribution",3]],["keydistribution",3]],[[["keydistribution",3]]],[[["keydistribution",3]],["keydistribution",3]],[[["keydistribution",3]]],[[],["u8",15]],[[["keydistribution",3]],["keydistribution",3]],[[["keydistribution",3]]],[[],["bondingtype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iocapabilities",4]],[[],["oob",4]],[[],["authreq",3]],[[],["bondingtype",4]],[[],["keydistribution",3]],[[]],[[]],[[]],[[]],[[]],[[["keydistribution",3]],["ordering",4]],[[["keydistribution",3]],["bool",15]],[[],["keydistribution",3]],[[["keydistribution",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[["u8",15]]],[[]],[[["u8",15]]],[[["u8",15]]],[[]],[[["u8",15]]],[[]],[[["u8",15]],[["keydistribution",3],["option",4]]],[[["u8",15]],["keydistribution",3]],[[["u8",15]],["keydistribution",3]],[[["intoiterator",8]],["keydistribution",3]],[[]],[[["keydistribution",3]]],[[["keydistribution",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["keydistribution",3]],["bool",15]],[[]],[[],["keydistribution",3]],[[["keydistribution",3]],[["option",4],["ordering",4]]],[[["sender",3]],[["error",4],["result",4]]],[[["keydistribution",3]]],[[],["bool",15]],[[["keydistribution",3],["bool",15]]],[[["bondingtype",4]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["keydistribution",3]],["keydistribution",3]],[[["keydistribution",3]]],[[]],[[]],[[]],[[]],[[]],[[["keydistribution",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[["duration",3]]],[[]],[[["duration",3]]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["duration",3]],[[],["instant",3]],[[]],[[]],[[["duration",3]],["ordering",4]],[[["instant",3]],["duration",3]],[[["duration",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]]],[[["u16",15]]],[[["u32",15]]],[[["u16",15]]],[[]],[[]],[[["duration",3]],["bool",15]],[[],["instant",3]],[[["duration",3]],[["option",4],["ordering",4]]],[[],["u32",15]],[[]],[[]],[[["duration",3]]],[[],["duration",3]],[[]],[[["duration",3]]],[[],["u32",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[],["u32",15]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uuid16",3]],[[],["uuid32",3]],[[],["uuid128",3]],[[],["uuidkind",4]],[[]],[[]],[[]],[[]],[[["uuid16",3]],["bool",15]],[[["uuid32",3]],["bool",15]],[[["uuid128",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["uuid16",3]]],[[]],[[]],[[["uuid32",3]]],[[["uuid16",3]]],[[]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[["bytereader",3]],[["result",4],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[["uuid16",3]],["bool",15]],[[["uuid32",3]],["bool",15]],[[["uuid128",3]],["bool",15]],[[["str",15]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[["bytewriter",3]],[["error",4],["result",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Error"],[3,"Handle"],[4,"AttributeAccessPermissions"],[4,"AttUuid"],[3,"Attribute"],[8,"AttributeProvider"],[3,"AttributeServer"],[3,"AttributeServerTx"],[3,"NoAttributes"],[3,"HandleRange"],[8,"ScanCallback"],[3,"Beacon"],[3,"BeaconScanner"],[3,"ByteReader"],[3,"BytesOr"],[3,"ByteWriter"],[3,"Field"],[8,"FromBytes"],[8,"ToBytes"],[8,"Config"],[3,"PublicKey"],[3,"SharedSecret"],[8,"EcdhProvider"],[8,"SecretKey"],[3,"P256SecretKey"],[3,"RingSecretKey"],[3,"P256Provider"],[3,"RingProvider"],[3,"InvalidPublicKey"],[3,"BatteryServiceAttrs"],[3,"MidiServiceAttrs"],[3,"Properties"],[4,"Appearance"],[8,"Characteristic"],[3,"BatteryLevel"],[3,"Channel"],[8,"ChannelMapper"],[8,"Protocol"],[3,"BleChannelMap"],[3,"L2CAPStateTx"],[3,"ChannelData"],[3,"Sender"],[3,"L2CAPState"],[8,"ProtocolObj"],[4,"NextUpdate"],[3,"FeatureSet"],[4,"RadioCmd"],[4,"AddressKind"],[3,"CompanyId"],[3,"Connection"],[3,"Responder"],[3,"LinkLayer"],[3,"DeviceAddress"],[3,"Cmd"],[8,"Transmitter"],[13,"ListenData"],[13,"ListenAdvertising"],[3,"Flags"],[4,"AdStructure"],[3,"ServiceUuids"],[13,"ManufacturerSpecificData"],[13,"ServiceData16"],[13,"Unknown"],[4,"PduType"],[4,"Pdu"],[4,"SleepClockAccuracy"],[3,"ConnectRequestData"],[3,"PduBuf"],[3,"Header"],[13,"ConnectableUndirected"],[13,"ConnectableDirected"],[13,"NonconnectableUndirected"],[13,"ScannableUndirected"],[13,"ScanRequest"],[13,"ScanResponse"],[13,"ConnectRequest"],[4,"Llid"],[4,"Pdu"],[3,"Header"],[13,"Control"],[13,"DataCont"],[13,"DataStart"],[3,"AllowAll"],[3,"WhitelistFilter"],[3,"AdvFilter"],[3,"ScanFilter"],[8,"AddressFilter"],[4,"ControlPdu"],[4,"ControlOpcode"],[4,"VersionNumber"],[3,"ConnectionParamRequest"],[3,"ConnectionUpdateData"],[13,"VersionInd"],[13,"Unknown"],[13,"TerminateInd"],[13,"FeatureReq"],[13,"FeatureRsp"],[13,"ChannelMapReq"],[13,"UnknownRsp"],[8,"PacketQueue"],[3,"Consume"],[3,"SimpleQueue"],[3,"SimpleProducer"],[3,"SimpleConsumer"],[8,"Consumer"],[8,"Producer"],[3,"AdvertisingChannel"],[3,"DataChannel"],[8,"Radio"],[4,"BondingType"],[4,"IoCapabilities"],[3,"KeyDistribution"],[8,"SecurityLevel"],[4,"Oob"],[3,"AuthReq"],[3,"NoSecurity"],[3,"SecureConnections"],[3,"SecurityManager"],[3,"Instant"],[3,"Duration"],[8,"Timer"],[3,"Uuid16"],[3,"Uuid32"],[8,"IsUuid"],[4,"UuidKind"],[3,"Uuid128"]]},\
"rubble_nrf5x":{"doc":"A Rubble BLE driver for the nRF51/nRF52-series radios.","t":[0,0,0,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,5],"n":["radio","timer","utils","BleRadio","PacketBuffer","az","borrow","borrow_mut","checked_as","configure_receiver","from","into","lossless_try_into","lossy_into","new","overflowing_as","recv_interrupt","saturating_as","state","transmit_advertising","transmit_data","try_from","try_into","tx_payload_buf","type_id","unwrapped_as","wrapping_as","BleTimer","NrfTimerExt","StampSource","az","az","borrow","borrow","borrow_mut","borrow_mut","checked_as","checked_as","clear_interrupt","clear_interrupt","configure_interrupt","create_stamp_source","duplicate","from","from","init","init","inner","into","into","is_interrupt_pending","is_pending","lossless_try_into","lossless_try_into","lossy_into","lossy_into","now","now","now","overflowing_as","overflowing_as","saturating_as","saturating_as","set_interrupt","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","get_device_address"],"q":["rubble_nrf5x","","","rubble_nrf5x::radio","","","","","","","","","","","","","","","","","","","","","","","","rubble_nrf5x::timer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rubble_nrf5x::utils"],"d":["Integrated 2.4 GHz radio with BLE support.","Generic <code>Timer</code> implementation that works with all 3 timers …","Useful utilities related to Rubble on the nRF52.","An interface to the nRF radio in BLE mode.","A packet buffer that can hold header and payload of any …","","","","","Configures the Radio for (not) receiving data according …","","","","","Initializes the radio in BLE mode and takes ownership of …","","Call this when the <code>RADIO</code> interrupt fires.","","Returns the current radio state.","","","","","","","","","Implements Rubble’s <code>Timer</code> trait for the timers on the …","Extension trait implemented for the nRF timer peripherals.","A timer interface that only allows reading the current …","","","","","","","","","Disables or acknowledges this timer’s interrupt.","Clears a pending interrupt and disables generation of …","Configures the timer interrupt to fire according to <code>next</code>.","Creates a new <code>StampSource</code> using this timer.","","","","Initialize the timer so that it counts at a rate of 1 MHz.","Initializes the timer.","Provides access to the raw peripheral. Use with caution.","","","Checks whether this timer’s interrupt is pending.","Returns whether a timer interrupt is currently pending.","","","","","Obtains the current time as an <code>Instant</code>.","","","","","","","Configures the timer’s interrupt to fire at the given …","","","","","","","","","","","Return the <code>DeviceAddress</code>, which is pre-programmed in the …"],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,3,2,3,2,3,2,3,4,2,2,2,4,2,3,4,2,2,2,3,2,4,2,3,2,3,4,2,3,2,3,2,3,4,2,3,2,3,2,3,2,3,2,3,0],"f":[null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[["radiocmd",4]]],[[]],[[]],[[],["option",4]],[[]],[[["radio",3],["packetbuffer",6],["ficr",3]]],[[]],[[["instant",3],["linklayer",3]],[["cmd",3],["option",4]]],[[]],[[],["state_r",6]],[[["header",3],["advertisingchannel",3]]],[[["u32",15],["header",3],["datachannel",3]]],[[],["result",4]],[[],["result",4]],[[]],[[],["typeid",3]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["nextupdate",4]]],[[],["stampsource",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["instant",3]],[[],["instant",3]],[[],["instant",3]],[[]],[[]],[[]],[[]],[[["instant",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["deviceaddress",3]]],"p":[[3,"BleRadio"],[3,"BleTimer"],[3,"StampSource"],[8,"NrfTimerExt"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};