var searchIndex = JSON.parse('{\
"rubble":{"doc":"An experimental BLE stack.","i":[[0,"att","rubble","Implementation of the Attribute Protocol (ATT).",null,null],[3,"Handle","rubble::att","A 16-bit handle uniquely identifying an attribute on an …",null,null],[3,"HandleRange","","A (de)serializable handle range that has been checked for …",null,null],[3,"AttributeServer","","An Attribute Protocol server providing read and write …",null,null],[3,"AttributeServerTx","","An ATT server handle that can send packets and initiate …",null,null],[4,"AttUuid","","ATT protocol UUID (either a 16 or a 128-bit UUID).",null,null],[13,"Uuid16","","",0,null],[13,"Uuid128","","",0,null],[3,"Attribute","","An ATT server attribute",null,null],[12,"att_type","","The type of the attribute as a UUID16, EG \\\"Primary …",1,null],[12,"handle","","Unique server-side identifer for attribute",1,null],[12,"value","","Attribute values can be any fixed length or variable …",1,null],[11,"new","","Creates a new attribute.",1,[[["attuuid",4],["handle",3]]]],[11,"value","","Retrieves the attribute\'s value as a slice.",1,[[]]],[11,"set_value","","Overrides the previously set attribute\'s value.",1,[[]]],[4,"AttributeAccessPermissions","","",null,null],[13,"Readable","","",2,null],[13,"Writeable","","",2,null],[13,"ReadableAndWriteable","","",2,null],[8,"AttributeProvider","","Trait for attribute sets that can be hosted by an …",null,null],[10,"for_attrs_in_range","","Calls a closure <code>f</code> with every attribute whose handle is …",3,[[["handlerange",3]],[["error",4],["result",4]]]],[10,"is_grouping_attr","","Returns whether <code>uuid</code> is a valid grouping attribute type …",3,[[["attuuid",4]]]],[10,"group_end","","Queries the last attribute that is part of the attribute …",3,[[["handle",3]],[["attribute",3],["option",4]]]],[11,"attr_access_permissions","","Retrieves the permissions for the given attribute.",3,[[["handle",3]],["attributeaccesspermissions",4]]],[11,"write_attr","","Attempts to write data to the given attribute.",3,[[["handle",3]],[["error",4],["result",4]]]],[11,"read_attr_dynamic","","If this read is from dynamic data fill the buffer and …",3,[[["handle",3]],["option",4]]],[11,"prepare_write_attr","","In order to write data longer than what would fit one …",3,[[["handle",3]],[["error",4],["result",4]]]],[11,"execute_write_attr","","In order to write data longer than what would fit one …",3,[[],[["error",4],["result",4]]]],[11,"find_information","","See BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, …",3,[[["sender",3],["handlerange",3]],[["error",4],["result",4]]]],[3,"NoAttributes","","An empty attribute set.",null,null],[0,"beacon","rubble","BLE beacon support, without dealing with Link-Layer stuff.",null,null],[3,"Beacon","rubble::beacon","A BLE beacon.",null,null],[11,"new","","Creates a new beacon that will broadcast a packet on all …",4,[[["deviceaddress",3]],[["error",4],["result",4]]]],[11,"broadcast","","Broadcasts the beacon data using <code>tx</code>.",4,[[]]],[8,"ScanCallback","","Callback for the <code>BeaconScanner</code>.",null,null],[10,"beacon","","Called when a beacon is received and has passed the …",5,[[["deviceaddress",3]]]],[3,"BeaconScanner","","A passive scanner for non-connectable beacon …",null,null],[11,"new","","Creates a <code>BeaconScanner</code> that will report beacons from any …",6,[[]]],[11,"with_filter","","Creates a <code>BeaconScanner</code> with a custom device filter.",6,[[]]],[11,"configure","","Configures the <code>BeaconScanner</code> and returns a <code>Cmd</code> to apply …",6,[[["instant",3],["duration",3]],["cmd",3]]],[11,"timer_update","","Updates the <code>BeaconScanner</code> after the configured timer has …",6,[[["instant",3]],["cmd",3]]],[11,"process_adv_packet","","Processes a received advertising channel packet.",6,[[["header",3]],["cmd",3]]],[0,"bytes","rubble","Utilities for decoding from and encoding into bytes.",null,null],[3,"BytesOr","rubble::bytes","Reference to a <code>T</code>, or to a byte slice that can be decoded …",null,null],[11,"from_ref","","Creates a <code>BytesOr</code> that holds on to a <code>T</code> via reference.",7,[[]]],[11,"read","","Reads the <code>T</code>, possibly by parsing the stored bytes.",7,[[]]],[11,"iter","","Returns an iterator over all <code>T</code>s stored in <code>self</code> (which is …",7,[[]]],[11,"iter","","Returns an iterator over all <code>T</code>s stored in <code>self</code>.",7,[[]]],[3,"ByteWriter","","Wrapper around a byte slice that can be used to encode …",null,null],[11,"new","","Creates a writer that will write to <code>buf</code>.",8,[[]]],[11,"into_rest","","Consumes <code>self</code> and returns the part of the contained …",8,[[]]],[11,"rest","","Returns the raw buffer this <code>ByteWriter</code> would write to.",8,[[]]],[11,"skip","","Skips the given number of bytes in the output data …",8,[[],[["error",4],["result",4]]]],[11,"split_off","","Creates and returns another <code>ByteWriter</code> that can write to …",8,[[],[["error",4],["result",4]]]],[11,"split_next_mut","","Splits off the next byte in the buffer.",8,[[],["option",4]]],[11,"space_left","","Returns the number of bytes that can be written to <code>self</code> …",8,[[]]],[11,"write_slice","","Writes all bytes from <code>other</code> to <code>self</code>.",8,[[],[["error",4],["result",4]]]],[11,"write_slice_truncate","","Writes as many bytes as can fit from <code>other</code> into <code>self</code>.",8,[[]]],[11,"write_u8","","Writes a single byte to <code>self</code>.",8,[[],[["error",4],["result",4]]]],[11,"write_u16_le","","Writes a <code>u16</code> to <code>self</code>, using Little Endian byte order.",8,[[],[["error",4],["result",4]]]],[11,"write_u32_le","","Writes a <code>u32</code> to <code>self</code>, using Little Endian byte order.",8,[[],[["error",4],["result",4]]]],[11,"write_u64_le","","Writes a <code>u64</code> to <code>self</code>, using Little Endian byte order.",8,[[],[["error",4],["result",4]]]],[3,"ByteReader","","Allows reading values from a borrowed byte slice.",null,null],[11,"new","","Creates a new <code>ByteReader</code> that will read from the given …",9,[[]]],[11,"as_raw_bytes","","Returns a reference to the raw bytes in <code>self</code>, without …",9,[[]]],[11,"into_rest","","Consumes <code>self</code> and returns the part of the contained …",9,[[]]],[11,"skip","","Skips the given number of bytes in the input data without …",9,[[],[["error",4],["result",4]]]],[11,"split_off","","Creates and returns another <code>ByteReader</code> that will read …",9,[[],[["error",4],["result",4]]]],[11,"bytes_left","","Returns the number of bytes that can still be read from …",9,[[]]],[11,"is_empty","","Returns whether <code>self</code> is at the end of the underlying …",9,[[]]],[11,"read_slice","","Reads a byte slice of length <code>len</code> from <code>self</code>.",9,[[],[["error",4],["result",4]]]],[11,"read_array","","Reads a byte-array-like type <code>S</code> from <code>self</code>.",9,[[],[["error",4],["result",4]]]],[11,"read_rest","","Reads the remaining bytes from <code>self</code>.",9,[[]]],[11,"read_u8","","Reads a single byte from <code>self</code>.",9,[[],[["error",4],["result",4]]]],[11,"read_u16_le","","Reads a <code>u16</code> from <code>self</code>, using Little Endian byte order.",9,[[],[["error",4],["result",4]]]],[11,"read_u32_le","","Reads a <code>u32</code> from <code>self</code>, using Little Endian byte order.",9,[[],[["error",4],["result",4]]]],[11,"read_u64_le","","Reads a <code>u64</code> from <code>self</code>, using Little Endian byte order.",9,[[],[["error",4],["result",4]]]],[8,"ToBytes","","Trait for encoding a value into a byte buffer.",null,null],[10,"to_bytes","","Converts <code>self</code> to bytes and writes them into <code>writer</code>, …",10,[[["bytewriter",3]],[["error",4],["result",4]]]],[8,"FromBytes","","Trait for decoding values from a byte slice.",null,null],[10,"from_bytes","","Decode a <code>Self</code> from a byte slice, advancing <code>bytes</code> to point …",11,[[["bytereader",3]],[["error",4],["result",4]]]],[0,"config","rubble","Stack configuration trait.",null,null],[8,"Config","rubble::config","Trait for Rubble stack configurations.",null,null],[16,"Timer","","A time source with microsecond resolution.",12,null],[16,"Transmitter","","The BLE packet transmitter (radio).",12,null],[16,"ChannelMapper","","The L2CAP channel mapper in use.",12,null],[16,"PacketQueue","","The packet queue to use for exchanging data between the …",12,null],[0,"ecdh","rubble","Elliptic Curve Diffie-Hellman (ECDH) on P-256.",null,null],[3,"P256Provider","rubble::ecdh","An ECDH provider using the pure-Rust <code>p256</code> crate.",null,null],[3,"P256SecretKey","","A secret key generated by a <code>P256Provider</code>.",null,null],[3,"RingProvider","","An ECDH provider that uses <em>ring</em> under the hood.",null,null],[3,"RingSecretKey","","A secret key generated by a <code>RingProvider</code>.",null,null],[3,"PublicKey","","A P-256 public key (point on the curve) in uncompressed …",null,null],[12,"0","","",13,null],[3,"SharedSecret","","A shared secret resulting from an ECDH key agreement.",null,null],[12,"0","","",14,null],[3,"InvalidPublicKey","","Error returned by <code>SecretKey::agree</code> when the public key of …",null,null],[11,"new","","Creates a new <code>InvalidPublicKey</code> error.",15,[[]]],[8,"EcdhProvider","","Trait for ECDH providers.",null,null],[16,"SecretKey","","Provider-defined secret key type.",16,null],[10,"generate_keypair","","Generates a P-256 key pair using cryptographically strong …",16,[[]]],[8,"SecretKey","","Secret key operations required by Rubble.",null,null],[10,"agree","","Performs ECDH key agreement using an ephemeral secret key …",17,[[["publickey",3]],[["invalidpublickey",3],["result",4],["sharedsecret",3]]]],[5,"run_tests","","Runs Rubble\'s P-256 provider testsuite against <code>provider</code>.",null,[[]]],[0,"gatt","rubble","Implementation of the Generic Attribute Profile (GATT).",null,null],[0,"characteristic","rubble::gatt","",null,null],[3,"Properties","rubble::gatt::characteristic","",null,null],[18,"BROADCAST","","",18,null],[18,"READ","","",18,null],[18,"WRITE_NO_RSP","","",18,null],[18,"WRITE","","",18,null],[18,"NOTIFY","","",18,null],[18,"INDICATE","","",18,null],[18,"AUTH_WRITES","","",18,null],[18,"EXTENDED","","",18,null],[11,"empty","","Returns an empty set of flags",18,[[],["properties",3]]],[11,"all","","Returns the set containing all flags.",18,[[],["properties",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",18,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",18,[[],[["option",4],["properties",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",18,[[],["properties",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",18,[[],["properties",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",18,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",18,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",18,[[["properties",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",18,[[["properties",3]]]],[11,"insert","","Inserts the specified flags in-place.",18,[[["properties",3]]]],[11,"remove","","Removes the specified flags in-place.",18,[[["properties",3]]]],[11,"toggle","","Toggles the specified flags in-place.",18,[[["properties",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",18,[[["properties",3]]]],[8,"Characteristic","","",null,null],[18,"PROPS","","",19,null],[18,"UUID","","The UUID assigned to the characteristic type.",19,null],[3,"BatteryLevel","","",null,null],[11,"new","","",20,[[]]],[11,"percentage","","",20,[[]]],[4,"Appearance","","",null,null],[13,"Unknown","","",21,null],[13,"GenericPhone","","",21,null],[13,"GenericComputer","","",21,null],[13,"GenericWatch","","",21,null],[13,"SportsWatch","","",21,null],[13,"GenericClock","","",21,null],[13,"GenericDisplay","","",21,null],[13,"GenericRemoteControl","","",21,null],[13,"GenericEyeGlasses","","",21,null],[13,"GenericTag","","",21,null],[13,"GenericKeyring","","",21,null],[13,"GenericMediaPlayer","","",21,null],[13,"GenericBarcodeScanner","","",21,null],[13,"GenericThermometer","","",21,null],[13,"ThermometerEar","","",21,null],[13,"GenericHeartRateSensor","","",21,null],[13,"HeartRateBelt","","",21,null],[13,"GenericBloodPressure","","",21,null],[13,"BloodPressureArm","","",21,null],[13,"BloodPressureWrist","","",21,null],[13,"HumanInterfaceDevice","","",21,null],[13,"Keyboard","","",21,null],[13,"Mouse","","",21,null],[13,"Joystick","","",21,null],[13,"Gamepad","","",21,null],[13,"DigitizerTablet","","",21,null],[13,"CardReader","","",21,null],[13,"DigitalPen","","",21,null],[13,"BarcodeScanner","","",21,null],[13,"GenericGlucoseMeter","","",21,null],[13,"GenericRunningWalkingSensor","","",21,null],[13,"RunningWalkingSensorInShoe","","",21,null],[13,"RunningWalkingSensorOnShoe","","",21,null],[13,"RunningWalkingSensorOnHip","","",21,null],[13,"GenericCycling","","",21,null],[13,"CyclingComputer","","",21,null],[13,"CyclingSpeedSensor","","",21,null],[13,"CyclingCadenceSensor","","",21,null],[13,"CyclingPowerSensor","","",21,null],[13,"CyclingSpeedAndCadenceSensor","","",21,null],[13,"GenericPulseOximeter","","",21,null],[13,"PulseOximeterFingertip","","",21,null],[13,"PulseOximeterWristWorn","","",21,null],[13,"GenericWeightScale","","",21,null],[13,"GenericPersonalMobilityDevice","","",21,null],[13,"PoweredWheelchair","","",21,null],[13,"MobilityScooter","","",21,null],[13,"GenericContinuousGlucoseMonitor","","",21,null],[13,"GenericInsulinPump","","",21,null],[13,"DurableInsulinPump","","",21,null],[13,"PatchInsulingPump","","",21,null],[13,"InsulinPen","","",21,null],[13,"GenericMedicationDelivery","","",21,null],[13,"GenericOutdoorSportsActivity","","",21,null],[13,"LocationDisplayService","","",21,null],[13,"LocationAndNavigationDisplayService","","",21,null],[13,"LocationPod","","",21,null],[13,"LocationAndNavigationPod","","",21,null],[3,"BatteryServiceAttrs","rubble::gatt","A demo <code>AttributeProvider</code> that will enumerate as a <em>Battery …",null,null],[11,"new","","",22,[[]]],[3,"MidiServiceAttrs","","A demo <code>AttributeProvider</code> that will enumerate as a <em>Midi …",null,null],[11,"new","","",23,[[]]],[0,"l2cap","rubble","The Logical Link Control and Adaptation Protocol (L2CAP).",null,null],[3,"Channel","rubble::l2cap","An L2CAP channel identifier (CID).",null,null],[18,"NULL","","The null channel identifier. Must not be used as a …",24,null],[18,"ATT","","The channel used by the Attribute Protocol (ATT).",24,null],[18,"LE_SIGNALING","","LE L2CAP signaling channel (connectionless).",24,null],[18,"LE_SECURITY_MANAGER","","LE Security Manager channel.",24,null],[11,"as_raw","","Returns the channel identifier (CID) as a raw <code>u16</code>.",24,[[]]],[11,"is_connection_oriented","","Returns whether this channel is connection-oriented.",24,[[]]],[11,"is_connectionless","","Returns whether this channel is connectionless.",24,[[]]],[8,"ChannelMapper","","Trait for L2CAP channel mappers that provide access to …",null,null],[16,"AttributeProvider","","The attribute provider used by the ATT server.",25,null],[10,"lookup","","Look up what\'s connected to <code>channel</code> (eg. the <code>Protocol</code> to …",25,[[["channel",3]],[["option",4],["channeldata",3]]]],[10,"att","","Returns information about the Attribute Protocol on …",25,[[],[["channeldata",3],["attributeserver",3]]]],[3,"ChannelData","","Data associated with a connected L2CAP channel.",null,null],[11,"response_channel","","Returns the <code>Channel</code> to which the response should be sent.",26,[[],["channel",3]]],[11,"pdu_size","","Returns the PDU size required by the protocol.",26,[[]]],[11,"protocol","","Returns the protocol connected to the channel.",26,[[]]],[11,"into_protocol","","Consumes <code>self</code> and returns the protocol connected to the …",26,[[]]],[3,"BleChannelMap","","A fixed BLE channel map that provides only the required …",null,null],[11,"empty","","Creates a new channel map with no backing data for the …",27,[[]]],[11,"with_attributes","","",27,[[]]],[11,"attribute_provider","","Provides mutable access to the underlying …",27,[[]]],[8,"ProtocolObj","","Trait for protocols that sit on top of L2CAP (object-safe …",null,null],[10,"process_message","","Process a message sent to the protocol.",28,[[["sender",3]],[["error",4],["result",4]]]],[8,"Protocol","","Trait for protocols that sit on top of L2CAP …",null,null],[18,"RSP_PDU_SIZE","","Minimum size needed by PDUs sent by this protocol.",29,null],[3,"L2CAPState","","L2CAP channel manager and responder.",null,null],[11,"new","","Creates a new L2CAP state using the given channel …",30,[[]]],[11,"tx","","Gives this instance the ability to transmit packets.",30,[[],[["producer",8],["l2capstatetx",3]]]],[11,"channel_mapper","","Provides mutable access to the underlying <code>ChannelMapper</code>.",30,[[]]],[3,"Sender","","Provides a way to send a L2CAP message with preallocated …",null,null],[11,"send","","Enqueues an L2CAP message to be sent over the data …",31,[[["tobytes",8]],[["error",4],["result",4]]]],[11,"send_with","","Enqueues an L2CAP message encoded by a closure.",31,[[],["result",4]]],[3,"L2CAPStateTx","","An <code>L2CAPState</code> with the ability to transmit packets.",null,null],[11,"process_start","","Process the start of a new L2CAP message (or a complete, …",32,[[],["consume",3]]],[11,"process_cont","","Process continuation of an L2CAP message.",32,[[],["consume",3]]],[11,"att","","Prepares for sending data using the Attribute Protocol.",32,[[],[["option",4],["attributeservertx",3]]]],[0,"link","rubble","Link-Layer.",null,null],[0,"ad_structure","rubble::link","Advertising Data / Extended Inquiry Response (EIR) data.",null,null],[4,"AdStructure","rubble::link::ad_structure","A list of AD structures can be sent along with an …",null,null],[13,"Flags","","Device flags and baseband capabilities.",33,null],[13,"ServiceUuids16","","",33,null],[13,"ServiceUuids32","","",33,null],[13,"ServiceUuids128","","",33,null],[13,"ServiceData16","","Service data with 16-bit service UUID.",33,null],[12,"uuid","rubble::link::ad_structure::AdStructure","The 16-bit service UUID.",34,null],[12,"data","","The associated service data. May be empty.",34,null],[13,"CompleteLocalName","rubble::link::ad_structure","Sets the full (unabbreviated) device name.",33,null],[13,"ShortenedLocalName","","Sets the shortened device name.",33,null],[13,"ManufacturerSpecificData","","Set manufacturer specific data",33,null],[12,"company_identifier","rubble::link::ad_structure::AdStructure","",35,null],[12,"payload","","",35,null],[13,"Unknown","rubble::link::ad_structure","An unknown or unimplemented AD structure stored as raw …",33,null],[12,"ty","rubble::link::ad_structure::AdStructure","Type byte.",36,null],[12,"data","","Raw data transmitted after the type.",36,null],[3,"ServiceUuids","rubble::link::ad_structure","List of service UUIDs offered by the device.",null,null],[11,"from_uuids","","Creates a <code>ServiceUuids</code> container from a list of UUIDs.",37,[[]]],[11,"is_complete","","Returns a boolean indicating whether this list is …",37,[[]]],[11,"iter","","Returns an iterator over the UUIDs stored in <code>self</code>.",37,[[]]],[3,"Flags","","BR/EDR and LE compatibility flags.",null,null],[18,"LE_LIMITED_DISCOVERABLE","","",38,null],[18,"LE_GENERAL_DISCOVERABLE","","",38,null],[18,"BR_EDR_NOT_SUPPORTED","","",38,null],[18,"SIMUL_LE_BR_CONTROLLER","","",38,null],[18,"SIMUL_LE_BR_HOST","","",38,null],[11,"empty","","Returns an empty set of flags",38,[[],["flags",3]]],[11,"all","","Returns the set containing all flags.",38,[[],["flags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",38,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",38,[[],[["option",4],["flags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",38,[[],["flags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",38,[[],["flags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",38,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",38,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",38,[[["flags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",38,[[["flags",3]]]],[11,"insert","","Inserts the specified flags in-place.",38,[[["flags",3]]]],[11,"remove","","Removes the specified flags in-place.",38,[[["flags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",38,[[["flags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",38,[[["flags",3]]]],[11,"discoverable","","Returns flags suitable for discoverable devices that want …",38,[[],["flags",3]]],[11,"broadcast","","Returns flags suitable for non-connectable devices that …",38,[[],["flags",3]]],[11,"to_u8","","Returns the raw representation of the flags.",38,[[]]],[11,"supports_classic_bluetooth","","Returns a boolean indicating whether the device that sent …",38,[[]]],[11,"le_limited_discoverable","","Device operating in LE Limited Discoverable mode.",38,[[]]],[11,"le_general_discoverable","","Device operating in LE General Discoverable mode.",38,[[]]],[0,"advertising","rubble::link","Advertising channel operations.",null,null],[17,"CRC_PRESET","rubble::link::advertising","CRC initialization value for advertising channel packets.",null,null],[17,"MAX_PAYLOAD_SIZE","","Max. advertising PDU payload size in Bytes.",null,null],[17,"ACCESS_ADDRESS","","Access Address to use for all advertising channel packets.",null,null],[4,"Pdu","","A parsed advertising channel PDU.",null,null],[13,"ConnectableUndirected","","Connectable and scannable advertisement.",39,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this …",40,null],[12,"advertising_data","","AD structures sent along with the advertisement.",40,null],[13,"ConnectableDirected","rubble::link::advertising","Directed connectable advertisement sent to an initiator.",39,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this …",41,null],[12,"initiator_addr","","Intended receiver of the advertisement.",41,null],[13,"NonconnectableUndirected","rubble::link::advertising","A non-connectable undirected advertisement (aka \\\"beacon\\\").",39,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device (beacon) that is …",42,null],[12,"advertising_data","","AD structures sent along with the advertisement.",42,null],[13,"ScannableUndirected","rubble::link::advertising","Scannable advertisement.",39,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this …",43,null],[12,"advertising_data","","AD structures sent along with the advertisement.",43,null],[13,"ScanRequest","rubble::link::advertising","Scan request sent from a scanner to an advertising device.",39,null],[12,"scanner_addr","rubble::link::advertising::Pdu","Address of the scanning device sending this PDU.",44,null],[12,"advertiser_addr","","Address of the advertising device that should be scanned.",44,null],[13,"ScanResponse","rubble::link::advertising","Response to a scan request, sent by the scanned …",39,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that responds to a scan …",45,null],[12,"scan_data","","Scan data payload, consisting of additional user-defined …",45,null],[13,"ConnectRequest","rubble::link::advertising","A request to establish a connection, sent by an …",39,null],[12,"initiator_addr","rubble::link::advertising::Pdu","Address of the device initiating the connection by …",46,null],[12,"advertiser_addr","","Address of the intended receiver of this packet.",46,null],[12,"lldata","","Connection parameters.",46,null],[11,"from_header_and_payload","rubble::link::advertising","Constructs a PDU by parsing <code>payload</code>.",39,[[["header",3],["bytereader",3]],[["error",4],["result",4]]]],[11,"sender","","Returns the device address of the sender of this PDU.",39,[[],["deviceaddress",3]]],[11,"receiver","","Returns the intended receiver of this PDU.",39,[[],[["option",4],["deviceaddress",3]]]],[11,"ty","","Returns the PDU type of <code>self</code>.",39,[[],["pdutype",4]]],[11,"advertising_data","","Returns an iterator over all AD structures encoded in the …",39,[[],["option",4]]],[3,"ConnectRequestData","","Connection parameters sent along with a <code>ConnectRequest</code> …",null,null],[11,"access_address","","Returns the Access Address to use for data channel …",47,[[]]],[11,"crc_init","","Returns the initialization value for the CRC calculation.",47,[[]]],[11,"channel_map","","Returns the channel map specified by the initiator.",47,[[],["channelmap",3]]],[11,"hop","","Returns the channel hop distance.",47,[[]]],[11,"end_of_tx_window","","Returns the end of the transmit window from reception of …",47,[[],["duration",3]]],[11,"interval","","Returns the connection event interval in µs.",47,[[],["duration",3]]],[11,"slave_latency","","Returns the slave latency (as the number of connection …",47,[[]]],[11,"supervision_timeout","","Returns the connection supervision timeout (…",47,[[],["duration",3]]],[4,"SleepClockAccuracy","","Indicates the master\'s sleep clock accuracy (SCA) in ppm …",null,null],[13,"Ppm251To500","","",48,null],[13,"Ppm151To250","","",48,null],[13,"Ppm101To150","","",48,null],[13,"Ppm76To100","","",48,null],[13,"Ppm51To75","","",48,null],[13,"Ppm31To50","","",48,null],[13,"Ppm21To30","","",48,null],[13,"Ppm0To20","","",48,null],[3,"PduBuf","","Stores an advertising channel PDU.",null,null],[11,"connectable_undirected","","Creates a connectable undirected advertising PDU (<code>ADV_IND</code>…",49,[[["deviceaddress",3]],[["error",4],["result",4]]]],[11,"connectable_directed","","Creates a connectable directed advertising PDU (…",49,[[["deviceaddress",3]]]],[11,"nonconnectable_undirected","","Creates a non-connectable undirected advertising PDU (…",49,[[["deviceaddress",3]],[["error",4],["result",4]]]],[11,"scannable_undirected","","Creates a scannable undirected advertising PDU (…",49,[[["deviceaddress",3]],[["error",4],["result",4]]]],[11,"beacon","","Creates an advertising channel PDU suitable for building …",49,[[["deviceaddress",3]],[["error",4],["result",4]]]],[11,"discoverable","","Creates an advertising PDU that makes this device …",49,[[["deviceaddress",3]],[["error",4],["result",4]]]],[11,"scan_request","","Creates a scan request PDU.",49,[[["deviceaddress",3]],[["error",4],["result",4]]]],[11,"scan_response","","Creates a scan response PDU.",49,[[["deviceaddress",3]],[["error",4],["result",4]]]],[11,"header","","",49,[[],["header",3]]],[11,"payload","","",49,[[]]],[3,"Header","","16-bit Advertising Channel PDU header preceding the …",null,null],[11,"new","","Creates a new Advertising Channel PDU header specifying …",50,[[["pdutype",4]]]],[11,"parse","","",50,[[]]],[11,"to_u16","","Returns the raw representation of the header.",50,[[]]],[11,"type_","","Returns the PDU type specified in the header.",50,[[],["pdutype",4]]],[11,"tx_add","","Returns the state of the <code>TxAdd</code> field.",50,[[]]],[11,"set_tx_add","","Sets the <code>TxAdd</code> field\'s value.",50,[[]]],[11,"rx_add","","Returns the state of the <code>RxAdd</code> field.",50,[[]]],[11,"set_rx_add","","Sets the <code>RxAdd</code> field\'s value.",50,[[]]],[11,"payload_length","","Returns the length of the payload in octets as specified …",50,[[]]],[11,"set_payload_length","","Sets the payload length of this PDU.",50,[[]]],[4,"PduType","","4-bit PDU type in <code>Header</code>.",null,null],[13,"AdvInd","","Connectable undirected advertising event (<code>ADV_IND</code>).",51,null],[13,"AdvDirectInd","","Connectable directed advertising event (<code>ADV_DIRECT_IND</code>).",51,null],[13,"AdvNonconnInd","","Non-connectable undirected advertising event (…",51,null],[13,"AdvScanInd","","Scannable undirected advertising event (<code>ADV_SCAN_IND</code>).",51,null],[13,"ScanReq","","Scan request (<code>SCAN_REQ</code>).",51,null],[13,"ScanRsp","","Scan response (<code>SCAN_RSP</code>).",51,null],[13,"ConnectReq","","Connect request (<code>CONNECT_REQ</code>).",51,null],[13,"Unknown","","",51,null],[11,"is_beacon","","Returns whether this PDU type is a beacon advertisement.",51,[[]]],[11,"allows_adv_data","","Whether AD structures can follow the fixed data in a PDU …",51,[[]]],[0,"data","rubble::link","Data Channel structures.",null,null],[3,"Header","rubble::link::data","16-bit data channel header preceding the payload.",null,null],[11,"new","","Creates a header with the given LLID field and all other …",52,[[["llid",4]]]],[11,"parse","","Parses a header from raw bytes.",52,[[]]],[11,"to_u16","","Returns the raw representation of the header.",52,[[]]],[11,"payload_length","","Returns the length of the payload in octets as specified …",52,[[]]],[11,"set_payload_length","","Sets the payload length field to <code>len</code>.",52,[[]]],[11,"llid","","Returns the <code>LLID</code> field (PDU type).",52,[[],["llid",4]]],[11,"nesn","","Returns the value of the <code>NESN</code> field (Next Expected …",52,[[],["seqnum",3]]],[11,"set_nesn","","Sets the value of the <code>NESN</code> field.",52,[[["seqnum",3]]]],[11,"sn","","Returns the value of the <code>SN</code> field (Sequence Number).",52,[[],["seqnum",3]]],[11,"set_sn","","Sets the value of the <code>SN</code> field.",52,[[["seqnum",3]]]],[11,"md","","Returns whether the <code>MD</code> field is set (More Data).",52,[[]]],[11,"set_md","","Sets the value of the <code>MD</code> field.",52,[[]]],[4,"Llid","","Values of the LLID field in <code>Header</code>.",null,null],[13,"Reserved","","Reserved for future use.",53,null],[13,"DataCont","","Continuation of L2CAP message, or empty PDU.",53,null],[13,"DataStart","","Start of L2CAP message.",53,null],[13,"Control","","LL control PDU.",53,null],[4,"Pdu","","Structured representation of a data channel PDU.",null,null],[13,"DataCont","","Continuation of an L2CAP message (or empty PDU).",54,null],[12,"message","rubble::link::data::Pdu","",55,null],[13,"DataStart","rubble::link::data","Start of an L2CAP message (must not be empty).",54,null],[12,"message","rubble::link::data::Pdu","",56,null],[13,"Control","rubble::link::data","LL Control PDU for controlling the Link-Layer connection.",54,null],[12,"data","rubble::link::data::Pdu","",57,null],[11,"empty","rubble::link::data","Creates an empty PDU that carries no message.",54,[[]]],[11,"llid","","Returns the <code>LLID</code> field to use for this PDU.",54,[[],["llid",4]]],[11,"parse","","Parses a PDU from a <code>Header</code> and raw payload.",54,[[["header",3]],[["error",4],["result",4]]]],[0,"filter","rubble::link","Link-Layer Device Filtering.",null,null],[8,"AddressFilter","rubble::link::filter","",null,null],[10,"matches","","",58,[[["deviceaddress",3]]]],[3,"AllowAll","","An <code>AddressFilter</code> that allows all devices (ie. no …",null,null],[3,"WhitelistFilter","","An <code>AddressFilter</code> that checks device addresses against a …",null,null],[11,"new","","Creates a device whitelist from an iterator yielding the …",59,[[]]],[6,"SliceIter","","",null,null],[11,"from_slice","","Creates a device whitelist from a slice of device …",59,[[]]],[6,"SingleIter","","",null,null],[11,"from_address","","Creates a device whitelist that will allow a single …",59,[[["deviceaddress",3]]]],[3,"AdvFilter","","Advertising filter policy. Governs which devices may scan …",null,null],[11,"new","","Creates a new filter policy from behaviors for scan and …",60,[[]]],[11,"may_scan","","",60,[[["deviceaddress",3]]]],[11,"may_connect","","",60,[[["deviceaddress",3]]]],[3,"ScanFilter","","Scanner filter policy. Governs which devices will be …",null,null],[11,"new","","Creates a new scanner filter policy from an <code>AddressFilter</code>.",61,[[]]],[11,"should_scan","","",61,[[["deviceaddress",3]]]],[0,"llcp","rubble::link","Defines packet structures used by the Link Layer Control …",null,null],[3,"ConnectionParamRequest","rubble::link::llcp","A connection parameter update request or response (…",null,null],[11,"new","","Creates a new connection update request structure filled …",62,[[]]],[11,"set_conn_interval","","Sets the minimum and maximum requested connection …",62,[[["duration",3]]]],[11,"min_conn_interval","","Returns the minimum requested connection interval.",62,[[],["duration",3]]],[11,"max_conn_interval","","Returns the maximum requested connection interval.",62,[[],["duration",3]]],[11,"slave_latency","","Returns the slave latency in number of connection events.",62,[[]]],[11,"supervision_timeout","","Returns the supervision timeout.",62,[[],["duration",3]]],[3,"ConnectionUpdateData","","Data transmitted with an <code>LL_CONNECTION_UPDATE_REQ</code> Control …",null,null],[11,"win_size","","Returns the size of the transmit window for the first PDU …",63,[[],["duration",3]]],[11,"win_offset","","Returns the offset of the transmit window, as a duration …",63,[[],["duration",3]]],[11,"interval","","Returns the duration between connection events.",63,[[],["duration",3]]],[11,"latency","","Returns the slave latency.",63,[[]]],[11,"timeout","","Returns the connection supervision timeout (…",63,[[],["duration",3]]],[11,"instant","","Returns the instant at which these changes should take …",63,[[]]],[4,"ControlPdu","","A structured representation of an LL Control PDU used by …",null,null],[13,"ConnectionUpdateReq","","<code>0x00</code>/<code>LL_CONNECTION_UPDATE_REQ</code> - Update connection …",64,null],[13,"ChannelMapReq","","<code>0x01</code>/<code>LL_CHANNEL_MAP_REQ</code> - Update the channel map.",64,null],[12,"map","rubble::link::llcp::ControlPdu","",65,null],[12,"instant","","",65,null],[13,"TerminateInd","rubble::link::llcp","<code>0x02</code>/<code>LL_TERMINATE_IND</code> - Close the connection.",64,null],[12,"error_code","rubble::link::llcp::ControlPdu","",66,null],[13,"UnknownRsp","rubble::link::llcp","<code>0x07</code>/<code>LL_UNKNOWN_RSP</code> - Response to unknown/unsupported LL …",64,null],[12,"unknown_type","rubble::link::llcp::ControlPdu","Opcode of the unknown PDU.",67,null],[13,"FeatureReq","rubble::link::llcp","<code>0x08</code>/<code>LL_FEATURE_REQ</code> - Master requests slave\'s features.",64,null],[12,"features_master","rubble::link::llcp::ControlPdu","Supported feature set of the master.",68,null],[13,"FeatureRsp","rubble::link::llcp","<code>0x09</code>/<code>LL_FEATURE_RSP</code> - Slave answers <code>LL_FEATURE_REQ</code> with …",64,null],[12,"features_used","rubble::link::llcp::ControlPdu","Features that will be used for the connection. Logical <code>AND</code>…",69,null],[13,"VersionInd","rubble::link::llcp","<code>0x0C</code>/<code>LL_VERSION_IND</code> - Bluetooth version indication (sent …",64,null],[12,"vers_nr","rubble::link::llcp::ControlPdu","",70,null],[12,"comp_id","","",70,null],[12,"sub_vers_nr","","",70,null],[13,"ConnectionParamReq","rubble::link::llcp","",64,null],[13,"ConnectionParamRsp","","",64,null],[13,"Unknown","","Catch-all variant for unsupported opcodes.",64,null],[12,"opcode","rubble::link::llcp::ControlPdu","The opcode we don\'t support. This can also be the <code>Unknown</code> …",71,null],[12,"ctr_data","","Additional data depending on the opcode.",71,null],[11,"opcode","rubble::link::llcp","Returns the opcode of this LL Control PDU.",64,[[],["controlopcode",4]]],[11,"encoded_size","","Returns the encoded size of this LLCPDU, including the …",64,[[]]],[4,"ControlOpcode","","Enumeration of all known LL Control PDU opcodes (not all …",null,null],[13,"ConnectionUpdateReq","","",72,null],[13,"ChannelMapReq","","",72,null],[13,"TerminateInd","","",72,null],[13,"EncReq","","",72,null],[13,"EncRsp","","",72,null],[13,"StartEncReq","","",72,null],[13,"StartEncRsp","","",72,null],[13,"UnknownRsp","","",72,null],[13,"FeatureReq","","",72,null],[13,"FeatureRsp","","",72,null],[13,"PauseEncReq","","",72,null],[13,"PauseEncRsp","","",72,null],[13,"VersionInd","","",72,null],[13,"RejectInd","","",72,null],[13,"SlaveFeatureReq","","",72,null],[13,"ConnectionParamReq","","",72,null],[13,"ConnectionParamRsp","","",72,null],[13,"RejectIndExt","","",72,null],[13,"PingReq","","",72,null],[13,"PingRsp","","",72,null],[13,"LengthReq","","",72,null],[13,"LengthRsp","","",72,null],[13,"Unknown","","",72,null],[4,"VersionNumber","","Enumeration of all possible <code>VersNr</code> for <code>LL_VERSION_IND</code> …",null,null],[13,"V4_0","","",73,null],[13,"V4_1","","",73,null],[13,"V4_2","","",73,null],[13,"V5_0","","",73,null],[13,"V5_1","","",73,null],[13,"Unknown","","",73,null],[0,"queue","rubble::link","An SPSC queue for data channel PDUs.",null,null],[8,"PacketQueue","rubble::link::queue","A splittable SPSC queue for data channel PDUs.",null,null],[16,"Producer","","Producing (writing) half of the queue.",74,null],[16,"Consumer","","Consuming (reading) half of the queue.",74,null],[10,"split","","Splits the queue into its producing and consuming ends.",74,[[]]],[8,"Producer","","The producing (writing) half of a packet queue.",null,null],[10,"free_space","","Returns the largest payload size that can be successfully …",75,[[]]],[10,"produce_dyn","","Enqueues a PDU with known size using a closure.",75,[[["fnmut",8]],[["error",4],["result",4]]]],[11,"produce_with","","Enqueues a PDU with known size using a closure.",75,[[],["result",4]]],[8,"Consumer","","The consuming (reading) half of a packet queue.",null,null],[10,"has_data","","Returns whether there is a packet to dequeue.",76,[[]]],[10,"consume_raw_with","","Passes the next raw packet in the queue to a closure.",76,[[],[["error",4],["result",4]]]],[11,"consume_pdu_with","","Passes the next packet in the queue to a closure.",76,[[],[["error",4],["result",4]]]],[3,"Consume","","Bundles a <code>T</code> along with information telling a queue …",null,null],[11,"new","","Consume the currently processed packet iff <code>consume</code> is <code>true</code>…",77,[[["error",4],["result",4]]]],[11,"always","","Consume the currently processed packet, then return <code>result</code>…",77,[[["error",4],["result",4]]]],[11,"never","","Do not consume the currently processed packet, then …",77,[[["error",4],["result",4]]]],[11,"on_success","","Consume the currently processed packet if <code>result</code> …",77,[[["error",4],["result",4]]]],[11,"should_consume","","Retrieves whether the packet should be removed from the …",77,[[]]],[11,"result","","Retrieves a reference to the inner result.",77,[[],["result",4]]],[11,"into_result","","Unwraps this <code>consume</code>, retrieving the inner result.",77,[[],[["error",4],["result",4]]]],[3,"SimpleQueue","","A simple packet queue that can hold a single packet.",null,null],[11,"new","","Creates a new, empty queue.",78,[[]]],[3,"SimpleProducer","","Producer (writer) half returned by <code>SimpleQueue::split</code>.",null,null],[3,"SimpleConsumer","","Consumer (reader) half returned by <code>SimpleQueue::split</code>.",null,null],[5,"run_tests","","Runs Rubble\'s packet queue testsuite against the given …",null,[[]]],[3,"CompanyId","rubble::link","Company identifier for use in link layer Control PDUs.",null,null],[3,"Connection","","Connection state and parameters.",null,null],[4,"AddressKind","","Specifies whether a device address is randomly generated …",null,null],[13,"Public","","Publicly registered IEEE 802-2001 LAN MAC address.",79,null],[13,"Random","","Randomly generated address.",79,null],[3,"DeviceAddress","","A Bluetooth device address.",null,null],[3,"FeatureSet","","A set of optional Link Layer features.",null,null],[3,"Responder","","Data channel packet processor.",null,null],[17,"CRC_POLY","","The CRC polynomial to use for CRC24 generation.",null,null],[17,"MIN_DATA_PAYLOAD_BUF","","Min. size a data PDU payload buffer must have (assuming …",null,null],[17,"MIN_DATA_PDU_BUF","","Min. size a data PDU buffer must have.",null,null],[17,"MIN_PAYLOAD_BUF","","Min. size a PDU payload buffer must have (to cover both …",null,null],[17,"MIN_PDU_BUF","","Min. size a Link-Layer PDU buffer must have (to cover …",null,null],[17,"MIN_PACKET_BUF","","Min. size a buffer for Link-Layer packets must have to …",null,null],[3,"LinkLayer","","Implementation of the real-time BLE Link-Layer logic.",null,null],[11,"new","","Creates a new Link-Layer.",80,[[["deviceaddress",3]]]],[11,"timer","","Returns a reference to the timer instance used by the …",80,[[]]],[11,"start_advertise","","Starts advertising this device, optionally sending data …",80,[[["duration",3]],[["error",4],["result",4],["nextupdate",4]]]],[11,"process_adv_packet","","Process an incoming packet from an advertising channel.",80,[[["instant",3],["header",3]],["cmd",3]]],[11,"process_data_packet","","Process an incoming data channel packet.",80,[[["header",3],["instant",3]],["cmd",3]]],[11,"update_timer","","Update the Link-Layer state after the timer expires.",80,[[],["cmd",3]]],[11,"connection","","Returns a reference to the connection state.",80,[[],[["connection",3],["option",4]]]],[11,"is_advertising","","Returns whether the Link-Layer is currently broadcasting …",80,[[]]],[11,"is_connected","","Returns whether the Link-Layer is currently connected.",80,[[]]],[3,"Cmd","","Command returned by the Link-Layer to the user.",null,null],[12,"radio","","Radio configuration request.",81,null],[12,"next_update","","Time until <code>LinkLayer::update</code> should be called.",81,null],[12,"queued_work","","Whether the Link-Layer code has enqueued more work into …",81,null],[4,"NextUpdate","","Specifies when the Link Layer\'s <code>update</code> method should be …",null,null],[13,"Disable","","Disable timer and do not call <code>update</code>.",82,null],[13,"Keep","","Keep the previously configured time.",82,null],[13,"At","","Call <code>update</code> at the given <code>Instant</code>.",82,null],[4,"RadioCmd","","Specifies if and how the radio should listen for …",null,null],[13,"Off","","Turn the radio off and don\'t call <code>LinkLayer::process_*</code> …",83,null],[13,"ListenAdvertising","","Listen on an advertising channel. If a packet is …",83,null],[12,"channel","rubble::link::RadioCmd","The advertising channel to listen on.",84,null],[13,"ListenData","rubble::link","Listen on a data channel. If a matching packet is …",83,null],[12,"channel","rubble::link::RadioCmd","The data channel to listen on.",85,null],[12,"access_address","","The Access Address to listen for.",85,null],[12,"crc_init","","Initialization value of the CRC-24 calculation.",85,null],[12,"timeout","","Flag to indicate if the last connection event timed out.",85,null],[8,"Transmitter","rubble::link","Trait for Link Layer packet transmission.",null,null],[10,"tx_payload_buf","","Get a reference to the Transmitter\'s PDU payload buffer.",86,[[]]],[10,"transmit_advertising","","Transmit an Advertising Channel PDU.",86,[[["advertisingchannel",3],["header",3]]]],[10,"transmit_data","","Transmit a Data Channel PDU.",86,[[["header",3],["datachannel",3]]]],[0,"phy","rubble","Physical layer interactions.",null,null],[3,"AdvertisingChannel","rubble::phy","One of the three advertising channels (channel indices …",null,null],[11,"first","","Returns the first (lowest-numbered) advertising channel.",87,[[]]],[11,"iter_all","","Returns an iterator that yields all 3 advertising …",87,[[]]],[11,"cycle","","Returns the next advertising channel, or the first one if …",87,[[]]],[11,"channel","","Returns the channel index.",87,[[]]],[11,"rf_channel","","Returns the physical RF channel corresponding to this …",87,[[]]],[11,"freq","","Returns the center frequency of this channel in MHz.",87,[[]]],[11,"whitening_iv","","Calculates the initial value of the LFSR to use for data …",87,[[]]],[3,"DataChannel","","One of 37 data channels on which data channel PDUs are …",null,null],[11,"new","","Creates a <code>DataChannel</code> from a raw index.",88,[[]]],[11,"index","","Returns the data channel index.",88,[[]]],[11,"rf_channel","","Returns the RF channel corresponding to this data channel …",88,[[]]],[11,"freq","","Returns the center frequency of this channel in MHz.",88,[[]]],[11,"whitening_iv","","Calculates the initial value of the LFSR to use for data …",88,[[]]],[8,"Radio","","Trait for raw 2.4 GHz non-BLE-specific radios.",null,null],[10,"transmit","","Transmit every Byte in <code>buf</code> over the air, LSb first, at …",89,[[]]],[0,"security","rubble","The LE Security Manager protocol.",null,null],[8,"SecurityLevel","rubble::security","Supported security levels.",null,null],[18,"MTU","","The L2CAP MTU required by this security level.",90,null],[3,"NoSecurity","","<em>LE Secure Connections</em> are not supported and will not be …",null,null],[3,"SecureConnections","","Indicates support for <em>LE Secure Connections</em>.",null,null],[3,"SecurityManager","","The LE Security Manager.",null,null],[11,"no_security","","",91,[[]]],[4,"IoCapabilities","","Describes the I/O capabilities of a device that can be …",null,null],[13,"DisplayOnly","","Device can display a 6-digit number, but has no input …",92,null],[13,"DisplayYesNo","","Device can display a 6-digit number and the user can …",92,null],[13,"KeyboardOnly","","Device does not have output capability, but the user can …",92,null],[13,"NoInputNoOutput","","Device has no meaningful input and output capabilities.",92,null],[13,"KeyboardDisplay","","Device can display a 6-digit passcode and allows passcode …",92,null],[13,"Unknown","","",92,null],[3,"AuthReq","","Authentication requirements exchanged during pairing …",null,null],[11,"bonding_type","","Returns the requested bonding.",93,[[],["bondingtype",4]]],[11,"set_bonding_type","","",93,[[["bondingtype",4]]]],[11,"mitm","","Returns whether MITM protection is requested.",93,[[]]],[11,"set_mitm","","",93,[[]]],[11,"secure_connection","","Returns whether <em>LE Secure Connection</em> pairing is supported …",93,[[]]],[11,"set_secure_connection","","Sets whether <em>LE Secure Connection</em> pairing is supported …",93,[[]]],[11,"keypress","","",93,[[]]],[11,"set_keypress","","",93,[[]]],[4,"BondingType","","Whether to perform bonding in addition to pairing.",null,null],[13,"NoBonding","","No bonding should be performed; the exchanged keys should …",94,null],[13,"Bonding","","Permanently store the exchanged keys to allow resuming …",94,null],[13,"Unknown","","",94,null],[3,"KeyDistribution","","Indicates which types of keys a device requests for …",null,null],[18,"ENC_KEY","","",95,null],[18,"ID_KEY","","",95,null],[18,"SIGN_KEY","","",95,null],[18,"LINK_KEY","","",95,null],[11,"empty","","Returns an empty set of flags",95,[[],["keydistribution",3]]],[11,"all","","Returns the set containing all flags.",95,[[],["keydistribution",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",95,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",95,[[],[["keydistribution",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",95,[[],["keydistribution",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",95,[[],["keydistribution",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",95,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",95,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",95,[[["keydistribution",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",95,[[["keydistribution",3]]]],[11,"insert","","Inserts the specified flags in-place.",95,[[["keydistribution",3]]]],[11,"remove","","Removes the specified flags in-place.",95,[[["keydistribution",3]]]],[11,"toggle","","Toggles the specified flags in-place.",95,[[["keydistribution",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",95,[[["keydistribution",3]]]],[0,"time","rubble","Time APIs for obtaining the current time and calculating …",null,null],[3,"Duration","rubble::time","A duration with microsecond resolution.",null,null],[18,"T_IFS","","The duration of the interframe spacing between BLE …",96,null],[11,"from_micros","","Creates a <code>Duration</code> from a number of microseconds.",96,[[]]],[11,"from_millis","","Creates a <code>Duration</code> representing the given number of …",96,[[]]],[11,"from_secs","","Creates a <code>Duration</code> representing a number of seconds.",96,[[]]],[11,"whole_secs","","Returns the number of whole seconds that fit in <code>self</code>.",96,[[]]],[11,"whole_millis","","Returns the number of whole milliseconds that fit in <code>self</code>.",96,[[]]],[11,"as_micros","","Returns the number of microseconds represented by <code>self</code>.",96,[[]]],[11,"subsec_micros","","Returns the fractional part of microseconds in <code>self</code>.",96,[[]]],[3,"Instant","","A point in time, relative to an unspecfied epoch.",null,null],[18,"MAX_TIME_BETWEEN","","The maximum time between two <code>Instant</code>s that can be handled …",97,null],[11,"from_raw_micros","","Creates an <code>Instant</code> from raw microseconds since an …",97,[[]]],[11,"raw_micros","","Returns the raw value from which this <code>Instant</code> was created.",97,[[]]],[11,"duration_since","","Calculates the duration of time that has passed between …",97,[[["instant",3]],["duration",3]]],[8,"Timer","","Trait for time providers.",null,null],[10,"now","","Obtain the current time as an <code>Instant</code>.",98,[[],["instant",3]]],[0,"uuid","rubble","BLE UUIDs (16, 32 or 128 bits).",null,null],[3,"Uuid16","rubble::uuid","A 16-bit UUID alias.",null,null],[12,"0","","",99,null],[3,"Uuid32","","A 32-bit UUID alias.",null,null],[12,"0","","",100,null],[3,"Uuid128","","A full 128-bit UUID.",null,null],[11,"from_bytes","","Creates a 128-bit UUID from 16 raw bytes (encoded in …",101,[[]]],[11,"parse_static","","Parses a UUID string literal, panicking when the string …",101,[[]]],[4,"UuidKind","","List of the supported UUID types.",null,null],[13,"Uuid16","","",102,null],[13,"Uuid32","","",102,null],[13,"Uuid128","","",102,null],[8,"IsUuid","","Marker for UUID types.",null,null],[18,"KIND","","",103,null],[4,"Error","rubble","Errors returned by the BLE stack.",null,null],[13,"InvalidLength","","Packet specified an invalid length value or was too short.",104,null],[13,"InvalidValue","","Invalid value supplied for field.",104,null],[13,"Eof","","Unexpectedly reached EOF while reading or writing data.",104,null],[13,"IncompleteParse","","Parsing didn\'t consume the entire buffer.",104,null],[17,"BLUETOOTH_VERSION","","Version of the Bluetooth specification implemented by …",null,null],[11,"from","rubble::att","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"into","","",105,[[]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"from","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"into","","",106,[[]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"into","","",107,[[]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"into","","",108,[[]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"into","","",109,[[]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","rubble::beacon","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","rubble::bytes","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","rubble::ecdh","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"into","","",110,[[]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"into","","",111,[[]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"into","","",112,[[]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"into","","",113,[[]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_string","","",15,[[],["string",3]]],[11,"from","rubble","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"into","","",104,[[]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"to_string","","",104,[[],["string",3]]],[11,"from","rubble::gatt::characteristic","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"from","rubble::gatt","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","rubble::l2cap","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","rubble::link::ad_structure","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"from","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"from","rubble::link::advertising","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"from","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"from","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","rubble::link","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"into","","",114,[[]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"from","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"into","","",115,[[]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","rubble::link::data","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","rubble::link","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"into","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"from","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"into","","",116,[[]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"to_string","","",116,[[],["string",3]]],[11,"from","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"into","","",117,[[]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"from","rubble::link::filter","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"into","","",118,[[]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","rubble::link::llcp","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"from","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"from","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"from","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"from","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"from","rubble::link::queue","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"into","","",119,[[]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"into","","",120,[[]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","rubble::link","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"into","","",121,[[]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"into","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"into","","",81,[[]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"from","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"into","","",82,[[]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"from","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"into","","",83,[[]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"from","rubble::phy","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"into","","",87,[[]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"from","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"into","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"from","rubble::security","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"into","","",122,[[]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"into","","",123,[[]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"into","","",91,[[]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"into","","",92,[[]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"from","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"into","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"from","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"into","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"from","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"into","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"from","rubble::time","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"into","","",96,[[]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"to_string","","",96,[[],["string",3]]],[11,"from","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"into","","",97,[[]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"to_string","","",97,[[],["string",3]]],[11,"from","rubble::uuid","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"into","","",99,[[]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"from","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"into","","",100,[[]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"from","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"into","","",101,[[]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"from","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"into","","",102,[[]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"for_attrs_in_range","rubble::att","",109,[[["handlerange",3]],[["error",4],["result",4]]]],[11,"is_grouping_attr","","",109,[[["attuuid",4]]]],[11,"group_end","","",109,[[["handle",3]],[["attribute",3],["option",4]]]],[11,"for_attrs_in_range","rubble::gatt","",22,[[["handlerange",3]],[["error",4],["result",4]]]],[11,"is_grouping_attr","","",22,[[["attuuid",4]]]],[11,"group_end","","",22,[[["handle",3]],[["attribute",3],["option",4]]]],[11,"for_attrs_in_range","","",23,[[["handlerange",3]],[["error",4],["result",4]]]],[11,"is_grouping_attr","","",23,[[["attuuid",4]]]],[11,"group_end","","",23,[[["handle",3]],[["attribute",3],["option",4]]]],[11,"to_bytes","rubble::att","",105,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",0,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::bytes","",7,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::l2cap","",24,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link::ad_structure","Lowers this AD structure into a Byte buffer.",33,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",37,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link::advertising","",50,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link::data","",52,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",54,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link","",117,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link::llcp","",62,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",64,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::uuid","",99,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",100,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",101,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::att","",105,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","","",0,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::bytes","",7,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","","",7,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::l2cap","",24,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::link::ad_structure","",33,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","","",37,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::link::advertising","",39,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","","",47,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","","",50,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::link::data","",52,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::link","",117,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::link::llcp","",62,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","","",64,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::uuid","",99,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","","",100,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"from_bytes","","",101,[[["bytereader",3]],[["error",4],["result",4]]]],[11,"generate_keypair","rubble::ecdh","",110,[[]]],[11,"generate_keypair","","",112,[[]]],[11,"agree","","",111,[[["publickey",3]],[["invalidpublickey",3],["result",4],["sharedsecret",3]]]],[11,"agree","","",113,[[["publickey",3]],[["invalidpublickey",3],["result",4],["sharedsecret",3]]]],[11,"lookup","rubble::l2cap","",27,[[["channel",3]],[["option",4],["channeldata",3]]]],[11,"att","","",27,[[],[["channeldata",3],["attributeserver",3]]]],[11,"process_message","rubble::att","",107,[[["sender",3]],[["error",4],["result",4]]]],[11,"process_message","rubble::security","",91,[[["sender",3]],[["error",4],["result",4]]]],[11,"matches","rubble::link::filter","",118,[[["deviceaddress",3]]]],[11,"matches","","",59,[[["deviceaddress",3]]]],[11,"free_space","rubble::link::queue","",119,[[]]],[11,"produce_dyn","","",119,[[["fnmut",8]],[["error",4],["result",4]]]],[11,"has_data","","",120,[[]]],[11,"consume_raw_with","","",120,[[],[["error",4],["result",4]]]],[11,"deref","rubble::l2cap","",32,[[]]],[11,"deref_mut","","",32,[[]]],[11,"from","rubble::att","",0,[[["uuid16",3]]]],[11,"from","","",0,[[["uuid32",3]]]],[11,"from","","",0,[[["uuid128",3]]]],[11,"from","rubble::bytes","",7,[[]]],[11,"from","rubble::link::ad_structure","",33,[[["flags",3]]]],[11,"from","rubble::link::advertising","",51,[[]]],[11,"from","rubble::link::data","",54,[[["controlpdu",4]]]],[11,"from","rubble::link::llcp","",72,[[]]],[11,"from","","",73,[[]]],[11,"from","rubble::security","",92,[[]]],[11,"from","","",94,[[]]],[11,"from","rubble::uuid","",100,[[["uuid16",3]]]],[11,"from","","",101,[[["uuid16",3]]]],[11,"from","","",101,[[["uuid32",3]]]],[11,"fmt","rubble::att","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::bytes","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::ecdh","",15,[[["formatter",3]],["result",6]]],[11,"fmt","rubble","",104,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::gatt::characteristic","",18,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::l2cap","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::advertising","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",114,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::data","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::llcp","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::queue","",77,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::phy","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::time","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::uuid","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::ecdh","",15,[[["formatter",3]],["result",6]]],[11,"fmt","rubble","",104,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",116,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::time","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"sub","rubble::gatt::characteristic","Returns the set difference of the two sets of flags.",18,[[["properties",3]],["properties",3]]],[11,"sub","rubble::link::ad_structure","Returns the set difference of the two sets of flags.",38,[[["flags",3]],["flags",3]]],[11,"sub","rubble::link","Returns the set difference of the two sets of flags.",117,[[["featureset",3]],["featureset",3]]],[11,"sub","rubble::security","Returns the set difference of the two sets of flags.",95,[[["keydistribution",3]],["keydistribution",3]]],[11,"sub","rubble::time","",96,[[]]],[11,"sub","","",96,[[]]],[11,"sub","","",97,[[],["duration",3]]],[11,"sub","","",97,[[["duration",3]]]],[11,"eq","rubble::att","",105,[[["handle",3]]]],[11,"ne","","",105,[[["handle",3]]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[["uuid16",3]]]],[11,"eq","","",0,[[["uuid128",3]]]],[11,"eq","rubble","",104,[[["error",4]]]],[11,"eq","rubble::gatt::characteristic","",18,[[["properties",3]]]],[11,"ne","","",18,[[["properties",3]]]],[11,"eq","","",21,[[["appearance",4]]]],[11,"eq","rubble::l2cap","",24,[[["channel",3]]]],[11,"ne","","",24,[[["channel",3]]]],[11,"eq","rubble::link::ad_structure","",38,[[["flags",3]]]],[11,"ne","","",38,[[["flags",3]]]],[11,"eq","rubble::link::advertising","",51,[[["pdutype",4]]]],[11,"ne","","",51,[[["pdutype",4]]]],[11,"eq","rubble::link::data","",53,[[["llid",4]]]],[11,"eq","rubble::link","",79,[[["addresskind",4]]]],[11,"eq","","",116,[[["deviceaddress",3]]]],[11,"ne","","",116,[[["deviceaddress",3]]]],[11,"eq","","",117,[[["featureset",3]]]],[11,"ne","","",117,[[["featureset",3]]]],[11,"eq","rubble::link::llcp","",72,[[["controlopcode",4]]]],[11,"ne","","",72,[[["controlopcode",4]]]],[11,"eq","","",73,[[["versionnumber",4]]]],[11,"ne","","",73,[[["versionnumber",4]]]],[11,"eq","rubble::phy","",88,[[["datachannel",3]]]],[11,"ne","","",88,[[["datachannel",3]]]],[11,"eq","rubble::security","",95,[[["keydistribution",3]]]],[11,"ne","","",95,[[["keydistribution",3]]]],[11,"eq","rubble::time","",96,[[["duration",3]]]],[11,"ne","","",96,[[["duration",3]]]],[11,"eq","rubble::uuid","",99,[[["uuid16",3]]]],[11,"ne","","",99,[[["uuid16",3]]]],[11,"eq","","",100,[[["uuid32",3]]]],[11,"ne","","",100,[[["uuid32",3]]]],[11,"eq","","",101,[[["uuid128",3]]]],[11,"ne","","",101,[[["uuid128",3]]]],[11,"cmp","rubble::gatt::characteristic","",18,[[["properties",3]],["ordering",4]]],[11,"cmp","rubble::link::ad_structure","",38,[[["flags",3]],["ordering",4]]],[11,"cmp","rubble::link","",117,[[["featureset",3]],["ordering",4]]],[11,"cmp","rubble::security","",95,[[["keydistribution",3]],["ordering",4]]],[11,"cmp","rubble::time","",96,[[["duration",3]],["ordering",4]]],[11,"partial_cmp","rubble::gatt::characteristic","",18,[[["properties",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["properties",3]]]],[11,"le","","",18,[[["properties",3]]]],[11,"gt","","",18,[[["properties",3]]]],[11,"ge","","",18,[[["properties",3]]]],[11,"partial_cmp","rubble::link::ad_structure","",38,[[["flags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",38,[[["flags",3]]]],[11,"le","","",38,[[["flags",3]]]],[11,"gt","","",38,[[["flags",3]]]],[11,"ge","","",38,[[["flags",3]]]],[11,"partial_cmp","rubble::link","",117,[[["featureset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",117,[[["featureset",3]]]],[11,"le","","",117,[[["featureset",3]]]],[11,"gt","","",117,[[["featureset",3]]]],[11,"ge","","",117,[[["featureset",3]]]],[11,"partial_cmp","rubble::security","",95,[[["keydistribution",3]],[["option",4],["ordering",4]]]],[11,"lt","","",95,[[["keydistribution",3]]]],[11,"le","","",95,[[["keydistribution",3]]]],[11,"gt","","",95,[[["keydistribution",3]]]],[11,"ge","","",95,[[["keydistribution",3]]]],[11,"partial_cmp","rubble::time","",96,[[["duration",3]],[["option",4],["ordering",4]]]],[11,"lt","","",96,[[["duration",3]]]],[11,"le","","",96,[[["duration",3]]]],[11,"gt","","",96,[[["duration",3]]]],[11,"ge","","",96,[[["duration",3]]]],[11,"add","","",96,[[]]],[11,"add","","",96,[[]]],[11,"add","","",97,[[["duration",3]]]],[11,"add_assign","","",96,[[]]],[11,"add_assign","","",97,[[["duration",3]]]],[11,"sub_assign","rubble::gatt::characteristic","Disables all flags enabled in the set.",18,[[["properties",3]]]],[11,"sub_assign","rubble::link::ad_structure","Disables all flags enabled in the set.",38,[[["flags",3]]]],[11,"sub_assign","rubble::link","Disables all flags enabled in the set.",117,[[["featureset",3]]]],[11,"sub_assign","rubble::security","Disables all flags enabled in the set.",95,[[["keydistribution",3]]]],[11,"sub_assign","rubble::time","",96,[[]]],[11,"sub_assign","","",97,[[["duration",3]]]],[11,"not","rubble::gatt::characteristic","Returns the complement of this set of flags.",18,[[],["properties",3]]],[11,"not","rubble::link::ad_structure","Returns the complement of this set of flags.",38,[[],["flags",3]]],[11,"not","rubble::link","Returns the complement of this set of flags.",117,[[],["featureset",3]]],[11,"not","rubble::security","Returns the complement of this set of flags.",95,[[],["keydistribution",3]]],[11,"bitand","rubble::gatt::characteristic","Returns the intersection between the two sets of flags.",18,[[["properties",3]],["properties",3]]],[11,"bitand","rubble::link::ad_structure","Returns the intersection between the two sets of flags.",38,[[["flags",3]],["flags",3]]],[11,"bitand","rubble::link","Returns the intersection between the two sets of flags.",117,[[["featureset",3]],["featureset",3]]],[11,"bitand","rubble::security","Returns the intersection between the two sets of flags.",95,[[["keydistribution",3]],["keydistribution",3]]],[11,"bitor","rubble::gatt::characteristic","Returns the union of the two sets of flags.",18,[[["properties",3]],["properties",3]]],[11,"bitor","rubble::link::ad_structure","Returns the union of the two sets of flags.",38,[[["flags",3]],["flags",3]]],[11,"bitor","rubble::link","Returns the union of the two sets of flags.",117,[[["featureset",3]],["featureset",3]]],[11,"bitor","rubble::security","Returns the union of the two sets of flags.",95,[[["keydistribution",3]],["keydistribution",3]]],[11,"bitxor","rubble::gatt::characteristic","Returns the left flags, but with all the right flags …",18,[[["properties",3]],["properties",3]]],[11,"bitxor","rubble::link::ad_structure","Returns the left flags, but with all the right flags …",38,[[["flags",3]],["flags",3]]],[11,"bitxor","rubble::link","Returns the left flags, but with all the right flags …",117,[[["featureset",3]],["featureset",3]]],[11,"bitxor","rubble::security","Returns the left flags, but with all the right flags …",95,[[["keydistribution",3]],["keydistribution",3]]],[11,"bitand_assign","rubble::gatt::characteristic","Disables all flags disabled in the set.",18,[[["properties",3]]]],[11,"bitand_assign","rubble::link::ad_structure","Disables all flags disabled in the set.",38,[[["flags",3]]]],[11,"bitand_assign","rubble::link","Disables all flags disabled in the set.",117,[[["featureset",3]]]],[11,"bitand_assign","rubble::security","Disables all flags disabled in the set.",95,[[["keydistribution",3]]]],[11,"bitor_assign","rubble::gatt::characteristic","Adds the set of flags.",18,[[["properties",3]]]],[11,"bitor_assign","rubble::link::ad_structure","Adds the set of flags.",38,[[["flags",3]]]],[11,"bitor_assign","rubble::link","Adds the set of flags.",117,[[["featureset",3]]]],[11,"bitor_assign","rubble::security","Adds the set of flags.",95,[[["keydistribution",3]]]],[11,"bitxor_assign","rubble::gatt::characteristic","Toggles the set of flags.",18,[[["properties",3]]]],[11,"bitxor_assign","rubble::link::ad_structure","Toggles the set of flags.",38,[[["flags",3]]]],[11,"bitxor_assign","rubble::link","Toggles the set of flags.",117,[[["featureset",3]]]],[11,"bitxor_assign","rubble::security","Toggles the set of flags.",95,[[["keydistribution",3]]]],[11,"hash","rubble::gatt::characteristic","",18,[[]]],[11,"hash","rubble::l2cap","",24,[[]]],[11,"hash","rubble::link::ad_structure","",38,[[]]],[11,"hash","rubble::link","",117,[[]]],[11,"hash","rubble::security","",95,[[]]],[11,"from_iter","rubble::gatt::characteristic","",18,[[["intoiterator",8]],["properties",3]]],[11,"from_iter","rubble::link::ad_structure","",38,[[["intoiterator",8]],["flags",3]]],[11,"from_iter","rubble::link","",117,[[["intoiterator",8]],["featureset",3]]],[11,"from_iter","rubble::security","",95,[[["intoiterator",8]],["keydistribution",3]]],[11,"into","rubble::att","",0,[[],["uuid128",3]]],[11,"fmt","rubble::gatt::characteristic","",18,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",38,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",117,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",95,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::gatt::characteristic","",18,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",38,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",117,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",95,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::gatt::characteristic","",18,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",38,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",117,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",95,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::gatt::characteristic","",18,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",38,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",117,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",95,[[["formatter",3]],["result",6]]],[11,"extend","rubble::gatt::characteristic","",18,[[["intoiterator",8]]]],[11,"extend","rubble::link::ad_structure","",38,[[["intoiterator",8]]]],[11,"extend","rubble::link","",117,[[["intoiterator",8]]]],[11,"extend","rubble::security","",95,[[["intoiterator",8]]]],[11,"clone","rubble::att","",105,[[],["handle",3]]],[11,"clone","","",0,[[],["attuuid",4]]],[11,"clone","rubble::bytes","",7,[[]]],[11,"clone","rubble::gatt::characteristic","",18,[[],["properties",3]]],[11,"clone","","",21,[[],["appearance",4]]],[11,"clone","rubble::l2cap","",24,[[],["channel",3]]],[11,"clone","rubble::link::ad_structure","",33,[[],["adstructure",4]]],[11,"clone","","",37,[[],["serviceuuids",3]]],[11,"clone","","",38,[[],["flags",3]]],[11,"clone","rubble::link::advertising","",39,[[],["pdu",4]]],[11,"clone","","",47,[[],["connectrequestdata",3]]],[11,"clone","","",48,[[],["sleepclockaccuracy",4]]],[11,"clone","","",50,[[],["header",3]]],[11,"clone","rubble::link","",114,[[],["companyid",3]]],[11,"clone","rubble::link::data","",52,[[],["header",3]]],[11,"clone","","",53,[[],["llid",4]]],[11,"clone","rubble::link","",79,[[],["addresskind",4]]],[11,"clone","","",116,[[],["deviceaddress",3]]],[11,"clone","","",117,[[],["featureset",3]]],[11,"clone","rubble::link::llcp","",62,[[],["connectionparamrequest",3]]],[11,"clone","","",63,[[],["connectionupdatedata",3]]],[11,"clone","","",64,[[],["controlpdu",4]]],[11,"clone","","",72,[[],["controlopcode",4]]],[11,"clone","","",73,[[],["versionnumber",4]]],[11,"clone","rubble::link","",81,[[],["cmd",3]]],[11,"clone","","",82,[[],["nextupdate",4]]],[11,"clone","","",83,[[],["radiocmd",4]]],[11,"clone","rubble::phy","",87,[[],["advertisingchannel",3]]],[11,"clone","","",88,[[],["datachannel",3]]],[11,"clone","rubble::security","",92,[[],["iocapabilities",4]]],[11,"clone","","",93,[[],["authreq",3]]],[11,"clone","","",94,[[],["bondingtype",4]]],[11,"clone","","",95,[[],["keydistribution",3]]],[11,"clone","rubble::time","",96,[[],["duration",3]]],[11,"clone","","",97,[[],["instant",3]]],[11,"clone","rubble::uuid","",99,[[],["uuid16",3]]],[11,"clone","","",100,[[],["uuid32",3]]],[11,"clone","","",101,[[],["uuid128",3]]],[11,"clone","","",102,[[],["uuidkind",4]]],[11,"default","rubble::att","",2,[[]]],[18,"NULL","","The <code>0x0000</code> handle is not used for actual attributes, but …",105,null],[11,"as_u16","","Returns the raw 16-bit integer representing this handle.",105,[[]]],[11,"from_raw","","Create an attribute handle from a raw u16",105,[[]]],[11,"new","","",106,[[["handle",3]]]],[11,"contains","","Checks if an Handle is in a HandleRange",106,[[["handle",3]]]],[11,"start","","Returns the lowest attribute handle value included in the …",106,[[],["handle",3]]],[11,"end","","Returns the last (highest) attribute handle value …",106,[[],["handle",3]]],[11,"new","","Creates an <code>AttributeServer</code> hosting attributes from an …",107,[[]]],[11,"with_sender","","Prepares for performing a server-initiated action (eg. …",107,[[["sender",3]],["attributeservertx",3]]],[11,"provider","","Provides mutable access to the underlying …",107,[[]]],[11,"notify_raw","","Sends an attribute value notification to the connected …",108,[[["handle",3]]]],[11,"new","rubble::ecdh","Creates a new instance.",110,[[]]],[11,"new","","Creates a new <code>RingProvider</code> that uses the system\'s RNG for …",112,[[]]],[11,"from_raw","rubble::link","Create a company ID from a raw <code>u16</code>.",114,[[]]],[11,"as_u16","","Get the raw <code>u16</code> representing this company identifier.",114,[[]]],[11,"name","","Get the full company name from this identifer.",114,[[],["option",4]]],[11,"connection_interval","","Returns the configured interval between connection events.",115,[[],["duration",3]]],[11,"new","","Create a new device address from 6 raw Bytes and an …",116,[[["addresskind",4]]]],[11,"kind","","Returns the address kind.",116,[[],["addresskind",4]]],[11,"is_random","","Returns whether this address is randomly generated.",116,[[]]],[11,"raw","","Returns the raw bytes making up this address (LSB first).",116,[[]]],[18,"LE_ENCRYPTION","","Low-Energy data encryption.",117,null],[18,"CONN_PARAM_REQ","","Connection parameters request procedure.",117,null],[18,"EXTENDED_REJECT_INDICATION","","Support for the LL Control PDU <code>LL_REJECT_IND_EXT</code>.",117,null],[18,"SLAVE_FEATURE_EXCHANGE","","Slave-initiated feature exchange.",117,null],[18,"LE_PING","","Low-Energy Link-Layer ping exchange.",117,null],[18,"LE_PACKET_LENGTH_EXTENSION","","Link-Layer PDU length update (support for data channel …",117,null],[18,"LL_PRIVACY","","Support for untrackable randomized device addresses (LL …",117,null],[18,"EXT_SCANNER_FILTER_POLICIES","","Extended scan filter policies.",117,null],[11,"empty","","Returns an empty set of flags",117,[[],["featureset",3]]],[11,"all","","Returns the set containing all flags.",117,[[],["featureset",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",117,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",117,[[],[["featureset",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",117,[[],["featureset",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",117,[[],["featureset",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",117,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",117,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",117,[[["featureset",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",117,[[["featureset",3]]]],[11,"insert","","Inserts the specified flags in-place.",117,[[["featureset",3]]]],[11,"remove","","Removes the specified flags in-place.",117,[[["featureset",3]]]],[11,"toggle","","Toggles the specified flags in-place.",117,[[["featureset",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",117,[[["featureset",3]]]],[11,"supported","","Returns the feature set supported by Rubble.",117,[[]]],[11,"new","","Creates a new packet processor hooked up to data channel …",121,[[["l2capstate",3]]]],[11,"has_work","","Returns <code>true</code> when this responder has work to do.",121,[[]]],[11,"process_one","","Processes a single incoming packet in the packet queue.",121,[[],[["error",4],["result",4]]]],[11,"l2cap","","Obtains access to the L2CAP instance.",121,[[],["l2capstatetx",3]]]],"p":[[4,"AttUuid"],[3,"Attribute"],[4,"AttributeAccessPermissions"],[8,"AttributeProvider"],[3,"Beacon"],[8,"ScanCallback"],[3,"BeaconScanner"],[3,"BytesOr"],[3,"ByteWriter"],[3,"ByteReader"],[8,"ToBytes"],[8,"FromBytes"],[8,"Config"],[3,"PublicKey"],[3,"SharedSecret"],[3,"InvalidPublicKey"],[8,"EcdhProvider"],[8,"SecretKey"],[3,"Properties"],[8,"Characteristic"],[3,"BatteryLevel"],[4,"Appearance"],[3,"BatteryServiceAttrs"],[3,"MidiServiceAttrs"],[3,"Channel"],[8,"ChannelMapper"],[3,"ChannelData"],[3,"BleChannelMap"],[8,"ProtocolObj"],[8,"Protocol"],[3,"L2CAPState"],[3,"Sender"],[3,"L2CAPStateTx"],[4,"AdStructure"],[13,"ServiceData16"],[13,"ManufacturerSpecificData"],[13,"Unknown"],[3,"ServiceUuids"],[3,"Flags"],[4,"Pdu"],[13,"ConnectableUndirected"],[13,"ConnectableDirected"],[13,"NonconnectableUndirected"],[13,"ScannableUndirected"],[13,"ScanRequest"],[13,"ScanResponse"],[13,"ConnectRequest"],[3,"ConnectRequestData"],[4,"SleepClockAccuracy"],[3,"PduBuf"],[3,"Header"],[4,"PduType"],[3,"Header"],[4,"Llid"],[4,"Pdu"],[13,"DataCont"],[13,"DataStart"],[13,"Control"],[8,"AddressFilter"],[3,"WhitelistFilter"],[3,"AdvFilter"],[3,"ScanFilter"],[3,"ConnectionParamRequest"],[3,"ConnectionUpdateData"],[4,"ControlPdu"],[13,"ChannelMapReq"],[13,"TerminateInd"],[13,"UnknownRsp"],[13,"FeatureReq"],[13,"FeatureRsp"],[13,"VersionInd"],[13,"Unknown"],[4,"ControlOpcode"],[4,"VersionNumber"],[8,"PacketQueue"],[8,"Producer"],[8,"Consumer"],[3,"Consume"],[3,"SimpleQueue"],[4,"AddressKind"],[3,"LinkLayer"],[3,"Cmd"],[4,"NextUpdate"],[4,"RadioCmd"],[13,"ListenAdvertising"],[13,"ListenData"],[8,"Transmitter"],[3,"AdvertisingChannel"],[3,"DataChannel"],[8,"Radio"],[8,"SecurityLevel"],[3,"SecurityManager"],[4,"IoCapabilities"],[3,"AuthReq"],[4,"BondingType"],[3,"KeyDistribution"],[3,"Duration"],[3,"Instant"],[8,"Timer"],[3,"Uuid16"],[3,"Uuid32"],[3,"Uuid128"],[4,"UuidKind"],[8,"IsUuid"],[4,"Error"],[3,"Handle"],[3,"HandleRange"],[3,"AttributeServer"],[3,"AttributeServerTx"],[3,"NoAttributes"],[3,"P256Provider"],[3,"P256SecretKey"],[3,"RingProvider"],[3,"RingSecretKey"],[3,"CompanyId"],[3,"Connection"],[3,"DeviceAddress"],[3,"FeatureSet"],[3,"AllowAll"],[3,"SimpleProducer"],[3,"SimpleConsumer"],[3,"Responder"],[3,"NoSecurity"],[3,"SecureConnections"]]},\
"rubble_nrf5x":{"doc":"A Rubble BLE driver for the nRF51/nRF52-series radios.","i":[[0,"radio","rubble_nrf5x","Integrated 2.4 GHz radio with BLE support.",null,null],[6,"PacketBuffer","rubble_nrf5x::radio","A packet buffer that can hold header and payload of any …",null,null],[3,"BleRadio","","An interface to the nRF radio in BLE mode.",null,null],[11,"new","","Initializes the radio in BLE mode and takes ownership of …",0,[[["packetbuffer",6],["radio",3],["ficr",3]]]],[11,"state","","Returns the current radio state.",0,[[],["state_r",6]]],[11,"configure_receiver","","Configures the Radio for (not) receiving data according …",0,[[["radiocmd",4]]]],[11,"recv_interrupt","","Call this when the <code>RADIO</code> interrupt fires.",0,[[["instant",3],["linklayer",3]],[["option",4],["cmd",3]]]],[0,"timer","rubble_nrf5x","Generic <code>Timer</code> implementation that works with all 3 timers …",null,null],[3,"BleTimer","rubble_nrf5x::timer","Implements Rubble\'s <code>Timer</code> trait for the timers on the nRF …",null,null],[11,"init","","Initializes the timer.",1,[[]]],[11,"configure_interrupt","","Configures the timer interrupt to fire according to <code>next</code>.",1,[[["nextupdate",4]]]],[11,"is_interrupt_pending","","Checks whether this timer\'s interrupt is pending.",1,[[]]],[11,"clear_interrupt","","Clears a pending interrupt and disables generation of …",1,[[]]],[11,"inner","","Provides access to the raw peripheral. Use with caution.",1,[[]]],[11,"create_stamp_source","","Creates a new <code>StampSource</code> using this timer.",1,[[],["stampsource",3]]],[3,"StampSource","","A timer interface that only allows reading the current …",null,null],[8,"NrfTimerExt","","Extension trait implemented for the nRF timer peripherals.",null,null],[10,"duplicate","","",2,[[]]],[10,"init","","Initialize the timer so that it counts at a rate of 1 MHz.",2,[[]]],[10,"set_interrupt","","Configures the timer\'s interrupt to fire at the given …",2,[[["instant",3]]]],[10,"clear_interrupt","","Disables or acknowledges this timer\'s interrupt.",2,[[]]],[10,"is_pending","","Returns whether a timer interrupt is currently pending.",2,[[]]],[10,"now","","Obtains the current time as an <code>Instant</code>.",2,[[],["instant",3]]],[0,"utils","rubble_nrf5x","Useful utilities related to Rubble on the nRF52.",null,null],[5,"get_device_address","rubble_nrf5x::utils","Return the <code>DeviceAddress</code>, which is pre-programmed in the …",null,[[],["deviceaddress",3]]],[11,"from","rubble_nrf5x::radio","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"lossless_try_into","","",0,[[],["option",4]]],[11,"lossy_into","","",0,[[]]],[11,"from","rubble_nrf5x::timer","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"lossless_try_into","","",1,[[],["option",4]]],[11,"lossy_into","","",1,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"lossless_try_into","","",3,[[],["option",4]]],[11,"lossy_into","","",3,[[]]],[11,"tx_payload_buf","rubble_nrf5x::radio","",0,[[]]],[11,"transmit_advertising","","",0,[[["header",3],["advertisingchannel",3]]]],[11,"transmit_data","","",0,[[["datachannel",3],["header",3]]]],[11,"now","rubble_nrf5x::timer","",1,[[],["instant",3]]],[11,"now","","",3,[[],["instant",3]]]],"p":[[3,"BleRadio"],[3,"BleTimer"],[8,"NrfTimerExt"],[3,"StampSource"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);